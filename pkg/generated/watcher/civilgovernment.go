// Code generated by 'gen/watchergen'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'listener/watchergen' for more details
// File was generated at 2019-12-05 18:54:58.92565 +0000 UTC
package watcher

import (
	// "fmt"
	"context"
	"time"

	"github.com/davecgh/go-spew/spew"
	log "github.com/golang/glog"
	"github.com/pkg/errors"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	specs "github.com/joincivil/civil-events-crawler/pkg/contractspecs"
	"github.com/joincivil/civil-events-crawler/pkg/model"
	"github.com/joincivil/civil-events-crawler/pkg/utils"

	"github.com/joincivil/go-common/pkg/generated/contract"
	ctime "github.com/joincivil/go-common/pkg/time"
)

func NewGovernmentContractWatchers(contractAddress common.Address) *GovernmentContractWatchers {
	return &GovernmentContractWatchers{
		contractAddress: contractAddress,
	}
}

func NewGovernmentContractWatchersAllEvents(contractAddress common.Address) *GovernmentContractWatchers {
	return &GovernmentContractWatchers{
		contractAddress: contractAddress,
		enableAll:       true,
	}
}

type GovernmentContractWatchers struct {
	errors          chan error
	contractAddress common.Address
	contract        *contract.GovernmentContract
	activeSubs      []utils.WatcherSubscription
	enableAll       bool
}

func (w *GovernmentContractWatchers) ContractAddress() common.Address {
	return w.contractAddress
}

func (w *GovernmentContractWatchers) ContractName() string {
	return "GovernmentContract"
}

func (w *GovernmentContractWatchers) cancelFunc(cancelFn context.CancelFunc, killCancel <-chan bool) {
}

func (w *GovernmentContractWatchers) StopWatchers(unsub bool) error {
	if unsub {
		for _, sub := range w.activeSubs {
			sub.Unsubscribe()
		}
	}
	w.activeSubs = nil
	return nil
}

func (w *GovernmentContractWatchers) StartWatchers(client bind.ContractBackend,
	eventRecvChan chan *model.Event, errs chan error) ([]utils.WatcherSubscription, error) {
	return w.StartGovernmentContractWatchers(client, eventRecvChan, errs)
}

// StartGovernmentContractWatchers starts up the event watchers for GovernmentContract
func (w *GovernmentContractWatchers) StartGovernmentContractWatchers(client bind.ContractBackend,
	eventRecvChan chan *model.Event, errs chan error) ([]utils.WatcherSubscription, error) {
	w.errors = errs
	contract, err := contract.NewGovernmentContract(w.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartGovernmentContract: err: %v", err)
		return nil, errors.Wrap(err, "error initializing StartGovernmentContract")
	}
	w.contract = contract

	var sub utils.WatcherSubscription
	subs := []utils.WatcherSubscription{}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "AppellateSet") {
		sub, err = w.startWatchAppellateSet(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startAppellateSet")
		}
		subs = append(subs, sub)
	}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "GovtReparameterizationProposal") {
		sub, err = w.startWatchGovtReparameterizationProposal(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startGovtReparameterizationProposal")
		}
		subs = append(subs, sub)
	}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "NewConstSet") {
		sub, err = w.startWatchNewConstSet(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startNewConstSet")
		}
		subs = append(subs, sub)
	}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "ParameterSet") {
		sub, err = w.startWatchParameterSet(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startParameterSet")
		}
		subs = append(subs, sub)
	}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "ProposalExpired") {
		sub, err = w.startWatchProposalExpired(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startProposalExpired")
		}
		subs = append(subs, sub)
	}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "ProposalFailed") {
		sub, err = w.startWatchProposalFailed(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startProposalFailed")
		}
		subs = append(subs, sub)
	}

	if w.enableAll || specs.IsListenerEnabledForEvent("GovernmentContract", "ProposalPassed") {
		sub, err = w.startWatchProposalPassed(eventRecvChan)
		if err != nil {
			return nil, errors.WithMessage(err, "error starting startProposalPassed")
		}
		subs = append(subs, sub)
	}

	w.activeSubs = subs
	return subs, nil
}

func (w *GovernmentContractWatchers) startWatchAppellateSet(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchAppellateSet", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractAppellateSet, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchAppellateSet start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractAppellateSet)
			log.Infof("startupFn: Starting WatchAppellateSet: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchAppellateSet(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchAppellateSet: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchAppellateSet")
			}
			log.Infof("startupFn: WatchAppellateSet started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchAppellateSet: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchAppellateSet: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of AppellateSet")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting AppellateSet: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old AppellateSet")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart AppellateSet: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchAppellateSet: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchAppellateSet")
				}
				modelEvent, err := model.NewEventFromContractEvent("AppellateSet", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchAppellateSet: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchAppellateSet")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchAppellateSet: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchAppellateSet")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchAppellateSet (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchAppellateSet: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchAppellateSet")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchAppellateSet: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}

func (w *GovernmentContractWatchers) startWatchGovtReparameterizationProposal(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchGovtReparameterizationProposal", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractGovtReparameterizationProposal, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchGovtReparameterizationProposal start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractGovtReparameterizationProposal)
			log.Infof("startupFn: Starting WatchGovtReparameterizationProposal: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchGovtReparameterizationProposal(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchGovtReparameterizationProposal: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchGovtReparameterizationProposal")
			}
			log.Infof("startupFn: WatchGovtReparameterizationProposal started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchGovtReparameterizationProposal: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchGovtReparameterizationProposal: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of GovtReparameterizationProposal")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting GovtReparameterizationProposal: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old GovtReparameterizationProposal")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart GovtReparameterizationProposal: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchGovtReparameterizationProposal: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchGovtReparameterizationProposal")
				}
				modelEvent, err := model.NewEventFromContractEvent("GovtReparameterizationProposal", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchGovtReparameterizationProposal: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchGovtReparameterizationProposal")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchGovtReparameterizationProposal: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchGovtReparameterizationProposal")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchGovtReparameterizationProposal (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchGovtReparameterizationProposal: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchGovtReparameterizationProposal")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchGovtReparameterizationProposal: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}

func (w *GovernmentContractWatchers) startWatchNewConstSet(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchNewConstSet", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractNewConstSet, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchNewConstSet start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractNewConstSet)
			log.Infof("startupFn: Starting WatchNewConstSet: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchNewConstSet(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchNewConstSet: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchNewConstSet")
			}
			log.Infof("startupFn: WatchNewConstSet started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchNewConstSet: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchNewConstSet: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of NewConstSet")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting NewConstSet: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old NewConstSet")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart NewConstSet: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchNewConstSet: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchNewConstSet")
				}
				modelEvent, err := model.NewEventFromContractEvent("NewConstSet", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchNewConstSet: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchNewConstSet")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchNewConstSet: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchNewConstSet")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchNewConstSet (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchNewConstSet: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchNewConstSet")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchNewConstSet: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}

func (w *GovernmentContractWatchers) startWatchParameterSet(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchParameterSet", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractParameterSet, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchParameterSet start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractParameterSet)
			log.Infof("startupFn: Starting WatchParameterSet: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchParameterSet(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchParameterSet: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchParameterSet")
			}
			log.Infof("startupFn: WatchParameterSet started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchParameterSet: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchParameterSet: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of ParameterSet")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting ParameterSet: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old ParameterSet")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart ParameterSet: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchParameterSet: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchParameterSet")
				}
				modelEvent, err := model.NewEventFromContractEvent("ParameterSet", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchParameterSet: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchParameterSet")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchParameterSet: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchParameterSet")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchParameterSet (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchParameterSet: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchParameterSet")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchParameterSet: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}

func (w *GovernmentContractWatchers) startWatchProposalExpired(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchProposalExpired", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractProposalExpired, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchProposalExpired start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractProposalExpired)
			log.Infof("startupFn: Starting WatchProposalExpired: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchProposalExpired(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchProposalExpired: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchProposalExpired")
			}
			log.Infof("startupFn: WatchProposalExpired started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchProposalExpired: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchProposalExpired: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of ProposalExpired")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting ProposalExpired: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old ProposalExpired")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart ProposalExpired: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchProposalExpired: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchProposalExpired")
				}
				modelEvent, err := model.NewEventFromContractEvent("ProposalExpired", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchProposalExpired: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchProposalExpired")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchProposalExpired: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchProposalExpired")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchProposalExpired (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchProposalExpired: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchProposalExpired")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchProposalExpired: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}

func (w *GovernmentContractWatchers) startWatchProposalFailed(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchProposalFailed", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractProposalFailed, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchProposalFailed start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractProposalFailed)
			log.Infof("startupFn: Starting WatchProposalFailed: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchProposalFailed(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchProposalFailed: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchProposalFailed")
			}
			log.Infof("startupFn: WatchProposalFailed started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchProposalFailed: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchProposalFailed: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of ProposalFailed")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting ProposalFailed: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old ProposalFailed")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart ProposalFailed: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchProposalFailed: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchProposalFailed")
				}
				modelEvent, err := model.NewEventFromContractEvent("ProposalFailed", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchProposalFailed: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchProposalFailed")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchProposalFailed: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchProposalFailed")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchProposalFailed (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchProposalFailed: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchProposalFailed")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchProposalFailed: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}

func (w *GovernmentContractWatchers) startWatchProposalPassed(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchProposalPassed", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.GovernmentContractProposalPassed, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchProposalPassed start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.GovernmentContractProposalPassed)
			log.Infof("startupFn: Starting WatchProposalPassed: addr: %v", w.contractAddress.Hex())
			sub, err := w.contract.WatchProposalPassed(
				opts,
				recvChan,
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchProposalPassed: addr: %v", w.contractAddress.Hex())
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchProposalPassed")
			}
			log.Infof("startupFn: WatchProposalPassed started: addr: %v", w.contractAddress.Hex())
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchProposalPassed: addr: %v, %v", w.contractAddress.Hex(), err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchProposalPassed: addr: %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of ProposalPassed")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting ProposalPassed: addr: %v, %v", w.contractAddress.Hex(), err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old ProposalPassed")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart ProposalPassed: addr: %v", w.contractAddress.Hex())
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchProposalPassed: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchProposalPassed")
				}
				modelEvent, err := model.NewEventFromContractEvent("ProposalPassed", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchProposalPassed: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchProposalPassed")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchProposalPassed: addr: %v, fatal (a): %v", w.contractAddress.Hex(), err)
					err = errors.Wrap(err, "error with WatchProposalPassed")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchProposalPassed (a): addr: %v", w.contractAddress.Hex())
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchProposalPassed: addr: %v, fatal (b): %v", w.contractAddress.Hex(), err)
				err = errors.Wrap(err, "error with WatchProposalPassed")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchProposalPassed: addr: %v", w.contractAddress.Hex())
				return nil
			}
		}
	}), nil
}
