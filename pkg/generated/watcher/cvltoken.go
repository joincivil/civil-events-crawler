// Code generated by 'gen/watchergen'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'listener/watchergen' for more details
// File was generated at 2019-04-04 01:14:56.948731 +0000 UTC
package watcher

import (
	// "fmt"
	"context"
	"time"

	"github.com/davecgh/go-spew/spew"
	log "github.com/golang/glog"
	"github.com/pkg/errors"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	"github.com/joincivil/civil-events-crawler/pkg/model"
	"github.com/joincivil/civil-events-crawler/pkg/utils"

	"github.com/joincivil/go-common/pkg/generated/contract"
	ctime "github.com/joincivil/go-common/pkg/time"
)

func NewCVLTokenContractWatchers(contractAddress common.Address) *CVLTokenContractWatchers {
	return &CVLTokenContractWatchers{
		contractAddress: contractAddress,
	}
}

type CVLTokenContractWatchers struct {
	errors          chan error
	contractAddress common.Address
	contract        *contract.CVLTokenContract
	activeSubs      []utils.WatcherSubscription
}

func (w *CVLTokenContractWatchers) ContractAddress() common.Address {
	return w.contractAddress
}

func (w *CVLTokenContractWatchers) ContractName() string {
	return "CVLTokenContract"
}

func (w *CVLTokenContractWatchers) cancelFunc(cancelFn context.CancelFunc, killCancel <-chan bool) {
}

func (w *CVLTokenContractWatchers) StopWatchers(unsub bool) error {
	if unsub {
		for _, sub := range w.activeSubs {
			sub.Unsubscribe()
		}
	}
	w.activeSubs = nil
	return nil
}

func (w *CVLTokenContractWatchers) StartWatchers(client bind.ContractBackend,
	eventRecvChan chan *model.Event, errs chan error) ([]utils.WatcherSubscription, error) {
	return w.StartCVLTokenContractWatchers(client, eventRecvChan, errs)
}

// StartCVLTokenContractWatchers starts up the event watchers for CVLTokenContract
func (w *CVLTokenContractWatchers) StartCVLTokenContractWatchers(client bind.ContractBackend,
	eventRecvChan chan *model.Event, errs chan error) ([]utils.WatcherSubscription, error) {
	w.errors = errs
	contract, err := contract.NewCVLTokenContract(w.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartCVLTokenContract: err: %v", err)
		return nil, errors.Wrap(err, "error initializing StartCVLTokenContract")
	}
	w.contract = contract

	var sub utils.WatcherSubscription
	subs := []utils.WatcherSubscription{}

	sub, err = w.startWatchApproval(eventRecvChan)
	if err != nil {
		return nil, errors.WithMessage(err, "error starting startApproval")
	}
	subs = append(subs, sub)

	sub, err = w.startWatchOwnershipRenounced(eventRecvChan)
	if err != nil {
		return nil, errors.WithMessage(err, "error starting startOwnershipRenounced")
	}
	subs = append(subs, sub)

	sub, err = w.startWatchOwnershipTransferred(eventRecvChan)
	if err != nil {
		return nil, errors.WithMessage(err, "error starting startOwnershipTransferred")
	}
	subs = append(subs, sub)

	sub, err = w.startWatchTransfer(eventRecvChan)
	if err != nil {
		return nil, errors.WithMessage(err, "error starting startTransfer")
	}
	subs = append(subs, sub)

	w.activeSubs = subs
	return subs, nil
}

func (w *CVLTokenContractWatchers) startWatchApproval(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchApproval", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.CVLTokenContractApproval, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchApproval start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.CVLTokenContractApproval)
			log.Infof("startupFn: Starting WatchApproval")
			sub, err := w.contract.WatchApproval(
				opts,
				recvChan,
				[]common.Address{},
				[]common.Address{},
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchApproval")
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchApproval")
			}
			log.Infof("startupFn: WatchApproval started")
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchApproval: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchApproval for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of Approval")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting Approval: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old Approval")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart Approval")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchApproval: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchApproval")
				}
				modelEvent, err := model.NewEventFromContractEvent("Approval", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchApproval: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchApproval")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchApproval, fatal (a): %v", err)
					err = errors.Wrap(err, "error with WatchApproval")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchApproval (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchApproval, fatal (b): %v", err)
				err = errors.Wrap(err, "error with WatchApproval")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchApproval")
				return nil
			}
		}
	}), nil
}

func (w *CVLTokenContractWatchers) startWatchOwnershipRenounced(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchOwnershipRenounced", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.CVLTokenContractOwnershipRenounced, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchOwnershipRenounced start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.CVLTokenContractOwnershipRenounced)
			log.Infof("startupFn: Starting WatchOwnershipRenounced")
			sub, err := w.contract.WatchOwnershipRenounced(
				opts,
				recvChan,
				[]common.Address{},
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchOwnershipRenounced")
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchOwnershipRenounced")
			}
			log.Infof("startupFn: WatchOwnershipRenounced started")
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchOwnershipRenounced: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchOwnershipRenounced for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of OwnershipRenounced")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting OwnershipRenounced: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old OwnershipRenounced")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart OwnershipRenounced")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchOwnershipRenounced: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchOwnershipRenounced")
				}
				modelEvent, err := model.NewEventFromContractEvent("OwnershipRenounced", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchOwnershipRenounced: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchOwnershipRenounced")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchOwnershipRenounced, fatal (a): %v", err)
					err = errors.Wrap(err, "error with WatchOwnershipRenounced")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchOwnershipRenounced (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchOwnershipRenounced, fatal (b): %v", err)
				err = errors.Wrap(err, "error with WatchOwnershipRenounced")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchOwnershipRenounced")
				return nil
			}
		}
	}), nil
}

func (w *CVLTokenContractWatchers) startWatchOwnershipTransferred(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchOwnershipTransferred", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.CVLTokenContractOwnershipTransferred, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchOwnershipTransferred start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.CVLTokenContractOwnershipTransferred)
			log.Infof("startupFn: Starting WatchOwnershipTransferred")
			sub, err := w.contract.WatchOwnershipTransferred(
				opts,
				recvChan,
				[]common.Address{},
				[]common.Address{},
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchOwnershipTransferred")
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchOwnershipTransferred")
			}
			log.Infof("startupFn: WatchOwnershipTransferred started")
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchOwnershipTransferred: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchOwnershipTransferred for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of OwnershipTransferred")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting OwnershipTransferred: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old OwnershipTransferred")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart OwnershipTransferred")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchOwnershipTransferred: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchOwnershipTransferred")
				}
				modelEvent, err := model.NewEventFromContractEvent("OwnershipTransferred", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchOwnershipTransferred: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchOwnershipTransferred")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchOwnershipTransferred, fatal (a): %v", err)
					err = errors.Wrap(err, "error with WatchOwnershipTransferred")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchOwnershipTransferred (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchOwnershipTransferred, fatal (b): %v", err)
				err = errors.Wrap(err, "error with WatchOwnershipTransferred")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchOwnershipTransferred")
				return nil
			}
		}
	}), nil
}

func (w *CVLTokenContractWatchers) startWatchTransfer(eventRecvChan chan *model.Event) (utils.WatcherSubscription, error) {
	killCancelTimeoutSecs := 10
	preemptiveTimeoutSecs := 60 * 30
	return utils.NewWatcherSubscription("WatchTransfer", func(quit <-chan struct{}) error {
		startupFn := func() (utils.WatcherSubscription, chan *contract.CVLTokenContractTransfer, error) {
			ctx := context.Background()
			ctx, cancelFn := context.WithCancel(ctx)
			opts := &bind.WatchOpts{Context: ctx}
			killCancel := make(chan bool)
			// 10 sec timeout mechanism for starting up watcher
			go func(cancelFn context.CancelFunc, killCancel <-chan bool) {
				select {
				case <-time.After(time.Duration(killCancelTimeoutSecs) * time.Second):
					log.Errorf("WatchTransfer start timeout, cancelling...")
					cancelFn()
				case <-killCancel:
				}
			}(cancelFn, killCancel)
			recvChan := make(chan *contract.CVLTokenContractTransfer)
			log.Infof("startupFn: Starting WatchTransfer")
			sub, err := w.contract.WatchTransfer(
				opts,
				recvChan,
				[]common.Address{},
				[]common.Address{},
			)
			close(killCancel)
			if err != nil {
				if sub != nil {
					log.Infof("startupFn: Unsubscribing WatchTransfer")
					sub.Unsubscribe()
				}
				return nil, nil, errors.Wrap(err, "startupFn: error starting WatchTransfer")
			}
			log.Infof("startupFn: WatchTransfer started")
			return sub, recvChan, nil
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchTransfer: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchTransfer for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 30 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(preemptiveTimeoutSecs)):
				log.Infof("Premptive restart of Transfer")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting Transfer: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old Transfer")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart Transfer")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchTransfer: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchTransfer")
				}
				modelEvent, err := model.NewEventFromContractEvent("Transfer", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchTransfer: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchTransfer")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchTransfer, fatal (a): %v", err)
					err = errors.Wrap(err, "error with WatchTransfer")
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchTransfer (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchTransfer, fatal (b): %v", err)
				err = errors.Wrap(err, "error with WatchTransfer")
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchTransfer")
				return nil
			}
		}
	}), nil
}
