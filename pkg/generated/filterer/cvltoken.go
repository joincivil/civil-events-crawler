// Code generated by 'gen/eventhandlergen.go'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'gen/filterergen_template.go' for more details
// File was generated at 2019-12-16 23:07:00.297039 +0000 UTC
package filterer

import (
	log "github.com/golang/glog"
	"runtime"
	"sync"

	"github.com/Jeffail/tunny"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	specs "github.com/joincivil/civil-events-crawler/pkg/contractspecs"
	commongen "github.com/joincivil/civil-events-crawler/pkg/generated/common"
	"github.com/joincivil/civil-events-crawler/pkg/model"

	"github.com/joincivil/go-common/pkg/generated/contract"
	ctime "github.com/joincivil/go-common/pkg/time"
)

func NewCVLTokenContractFilterers(contractAddress common.Address) *CVLTokenContractFilterers {
	contractFilterers := &CVLTokenContractFilterers{
		contractAddress:   contractAddress,
		eventTypes:        commongen.EventTypesCVLTokenContract(),
		eventToStartBlock: make(map[string]uint64),
		lastEvents:        make([]*model.Event, 0),
	}
	for _, eventType := range contractFilterers.eventTypes {
		contractFilterers.eventToStartBlock[eventType] = 0
	}
	return contractFilterers
}

type CVLTokenContractFilterers struct {
	contractAddress   common.Address
	contract          *contract.CVLTokenContract
	eventTypes        []string
	eventToStartBlock map[string]uint64
	lastEvents        []*model.Event
	lastEventsMutex   sync.Mutex
	pastEventsMutex   sync.Mutex
}

func (f *CVLTokenContractFilterers) ContractName() string {
	return "CVLTokenContract"
}

func (f *CVLTokenContractFilterers) ContractAddress() common.Address {
	return f.contractAddress
}

func (f *CVLTokenContractFilterers) StartFilterers(client bind.ContractBackend,
	pastEvents []*model.Event, nonSubOnly bool) ([]*model.Event, error) {
	return f.StartCVLTokenContractFilterers(client, pastEvents, nonSubOnly)
}

func (f *CVLTokenContractFilterers) EventTypes() []string {
	return f.eventTypes
}

func (f *CVLTokenContractFilterers) UpdateStartBlock(eventType string, startBlock uint64) {
	f.eventToStartBlock[eventType] = startBlock
}

func (f *CVLTokenContractFilterers) LastEvents() []*model.Event {
	return f.lastEvents
}

// StartCVLTokenContractFilterers retrieves events for CVLTokenContract
func (f *CVLTokenContractFilterers) StartCVLTokenContractFilterers(client bind.ContractBackend,
	pastEvents []*model.Event, nonSubOnly bool) ([]*model.Event, error) {
	contract, err := contract.NewCVLTokenContract(f.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartCVLTokenContract: err: %v", err)
		return pastEvents, err
	}
	f.contract = contract

	workerMultiplier := 1
	numWorkers := runtime.NumCPU() * workerMultiplier
	log.Infof("Filter worker #: %v", numWorkers)
	pool := tunny.NewFunc(numWorkers, func(payload interface{}) interface{} {
		f := payload.(func())
		f()
		return nil
	})
	defer pool.Close()

	wg := sync.WaitGroup{}
	resultsChan := make(chan []*model.Event)
	done := make(chan struct{})
	filtsRun := 0

	if !specs.IsEventDisabled("CVLTokenContract", "Approval") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CVLTokenContract", "Approval")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["Approval"]
				pevents, e := f.startFilterApproval(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving Approval: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CVLTokenContract", "OwnershipRenounced") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CVLTokenContract", "OwnershipRenounced")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["OwnershipRenounced"]
				pevents, e := f.startFilterOwnershipRenounced(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving OwnershipRenounced: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CVLTokenContract", "OwnershipTransferred") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CVLTokenContract", "OwnershipTransferred")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["OwnershipTransferred"]
				pevents, e := f.startFilterOwnershipTransferred(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving OwnershipTransferred: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CVLTokenContract", "Transfer") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CVLTokenContract", "Transfer")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["Transfer"]
				pevents, e := f.startFilterTransfer(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving Transfer: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	go func() {
		wg.Wait()
		close(done)
		log.Info("Filtering routines complete")
	}()

Loop:
	for {
		select {
		case <-done:
			break Loop
		case pevents := <-resultsChan:
			f.pastEventsMutex.Lock()
			pastEvents = append(pastEvents, pevents...)
			f.pastEventsMutex.Unlock()
		}
	}
	log.Infof("Total filterers run: %v, events found: %v", filtsRun, len(pastEvents))
	return pastEvents, nil
}

func (f *CVLTokenContractFilterers) startFilterApproval(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CVLTokenContract Approval for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CVLTokenContractApprovalIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterApproval(
			opts,
			[]common.Address{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CVLTokenContract Approval for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CVLTokenContract Approval for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CVLTokenContract Approval for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("Approval", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CVLTokenContract Approval added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CVLTokenContractFilterers) startFilterOwnershipRenounced(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CVLTokenContract OwnershipRenounced for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CVLTokenContractOwnershipRenouncedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterOwnershipRenounced(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CVLTokenContract OwnershipRenounced for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CVLTokenContract OwnershipRenounced for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CVLTokenContract OwnershipRenounced for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("OwnershipRenounced", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CVLTokenContract OwnershipRenounced added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CVLTokenContractFilterers) startFilterOwnershipTransferred(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CVLTokenContract OwnershipTransferred for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CVLTokenContractOwnershipTransferredIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterOwnershipTransferred(
			opts,
			[]common.Address{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CVLTokenContract OwnershipTransferred for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CVLTokenContract OwnershipTransferred for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CVLTokenContract OwnershipTransferred for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("OwnershipTransferred", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CVLTokenContract OwnershipTransferred added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CVLTokenContractFilterers) startFilterTransfer(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CVLTokenContract Transfer for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CVLTokenContractTransferIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterTransfer(
			opts,
			[]common.Address{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CVLTokenContract Transfer for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CVLTokenContract Transfer for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CVLTokenContract Transfer for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("Transfer", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CVLTokenContract Transfer added: %v", numEventsAdded)
	return pastEvents, nil
}
