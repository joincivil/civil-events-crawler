// Code generated by 'gen/eventhandlergen.go'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'gen/filterergen_template.go' for more details
// File was generated at 2019-03-20 17:29:07.898077 +0000 UTC
package filterer

import (
	log "github.com/golang/glog"
	"runtime"
	"sync"

	"github.com/Jeffail/tunny"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	commongen "github.com/joincivil/civil-events-crawler/pkg/generated/common"
	"github.com/joincivil/civil-events-crawler/pkg/model"

	"github.com/joincivil/go-common/pkg/generated/contract"
	ctime "github.com/joincivil/go-common/pkg/time"

	"math/big"
)

func NewParameterizerContractFilterers(contractAddress common.Address) *ParameterizerContractFilterers {
	contractFilterers := &ParameterizerContractFilterers{
		contractAddress:   contractAddress,
		eventTypes:        commongen.EventTypesParameterizerContract(),
		eventToStartBlock: make(map[string]uint64),
		lastEvents:        make([]*model.Event, 0),
	}
	for _, eventType := range contractFilterers.eventTypes {
		contractFilterers.eventToStartBlock[eventType] = 0
	}
	return contractFilterers
}

type ParameterizerContractFilterers struct {
	contractAddress   common.Address
	contract          *contract.ParameterizerContract
	eventTypes        []string
	eventToStartBlock map[string]uint64
	lastEvents        []*model.Event
	lastEventsMutex   sync.Mutex
	pastEventsMutex   sync.Mutex
}

func (f *ParameterizerContractFilterers) ContractName() string {
	return "ParameterizerContract"
}

func (f *ParameterizerContractFilterers) ContractAddress() common.Address {
	return f.contractAddress
}

func (f *ParameterizerContractFilterers) StartFilterers(client bind.ContractBackend, pastEvents []*model.Event) (error, []*model.Event) {
	return f.StartParameterizerContractFilterers(client, pastEvents)
}

func (f *ParameterizerContractFilterers) EventTypes() []string {
	return f.eventTypes
}

func (f *ParameterizerContractFilterers) UpdateStartBlock(eventType string, startBlock uint64) {
	f.eventToStartBlock[eventType] = startBlock
}

func (f *ParameterizerContractFilterers) LastEvents() []*model.Event {
	return f.lastEvents
}

// StartParameterizerContractFilterers retrieves events for ParameterizerContract
func (f *ParameterizerContractFilterers) StartParameterizerContractFilterers(client bind.ContractBackend, pastEvents []*model.Event) (error, []*model.Event) {
	contract, err := contract.NewParameterizerContract(f.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartParameterizerContract: err: %v", err)
		return err, pastEvents
	}
	f.contract = contract

	workerMultiplier := 1
	numWorkers := runtime.NumCPU() * workerMultiplier
	log.Infof("Num of workers: %v", numWorkers)
	pool := tunny.NewFunc(numWorkers, func(payload interface{}) interface{} {
		f := payload.(func())
		f()
		return nil
	})
	defer pool.Close()

	wg := sync.WaitGroup{}
	resultsChan := make(chan []*model.Event)
	done := make(chan bool)

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["ChallengeFailed"]
			e, pevents := f.startFilterChallengeFailed(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving ChallengeFailed: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["ChallengeSucceeded"]
			e, pevents := f.startFilterChallengeSucceeded(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving ChallengeSucceeded: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["NewChallenge"]
			e, pevents := f.startFilterNewChallenge(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving NewChallenge: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["ProposalAccepted"]
			e, pevents := f.startFilterProposalAccepted(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving ProposalAccepted: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["ProposalExpired"]
			e, pevents := f.startFilterProposalExpired(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving ProposalExpired: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["ReparameterizationProposal"]
			e, pevents := f.startFilterReparameterizationProposal(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving ReparameterizationProposal: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["RewardClaimed"]
			e, pevents := f.startFilterRewardClaimed(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving RewardClaimed: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	go func() {
		wg.Wait()
		done <- true
		log.Info("Filtering routines complete")
	}()

Loop:
	for {
		select {
		case <-done:
			break Loop
		case pevents := <-resultsChan:
			f.pastEventsMutex.Lock()
			pastEvents = append(pastEvents, pevents...)
			f.pastEventsMutex.Unlock()
		}
	}
	log.Infof("Total events found: %v", len(pastEvents))
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterChallengeFailed(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for ChallengeFailed for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractChallengeFailedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterChallengeFailed(
			opts,
			[][32]byte{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Successful filter: ChallengeFailed for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: ChallengeFailed for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: ChallengeFailed for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ChallengeFailed", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("ChallengeFailed events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterChallengeSucceeded(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for ChallengeSucceeded for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractChallengeSucceededIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterChallengeSucceeded(
			opts,
			[][32]byte{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Successful filter: ChallengeSucceeded for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: ChallengeSucceeded for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: ChallengeSucceeded for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ChallengeSucceeded", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("ChallengeSucceeded events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterNewChallenge(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for NewChallenge for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractNewChallengeIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterNewChallenge(
			opts,
			[][32]byte{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Successful filter: NewChallenge for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: NewChallenge for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: NewChallenge for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("NewChallenge", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("NewChallenge events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterProposalAccepted(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for ProposalAccepted for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractProposalAcceptedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterProposalAccepted(
			opts,
			[][32]byte{},
		)
		if err == nil {
			log.Infof("Successful filter: ProposalAccepted for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: ProposalAccepted for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: ProposalAccepted for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ProposalAccepted", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("ProposalAccepted events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterProposalExpired(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for ProposalExpired for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractProposalExpiredIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterProposalExpired(
			opts,
			[][32]byte{},
		)
		if err == nil {
			log.Infof("Successful filter: ProposalExpired for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: ProposalExpired for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: ProposalExpired for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ProposalExpired", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("ProposalExpired events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterReparameterizationProposal(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for ReparameterizationProposal for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractReparameterizationProposalIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterReparameterizationProposal(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Successful filter: ReparameterizationProposal for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: ReparameterizationProposal for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: ReparameterizationProposal for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ReparameterizationProposal", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("ReparameterizationProposal events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *ParameterizerContractFilterers) startFilterRewardClaimed(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for RewardClaimed for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.ParameterizerContractRewardClaimedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterRewardClaimed(
			opts,
			[]*big.Int{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Successful filter: RewardClaimed for contract %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: RewardClaimed for contract %v: err: %v", f.contractAddress.Hex(), err)
			return err, pastEvents
		}
		log.Infof("Retrying filter: RewardClaimed for contract %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("RewardClaimed", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("RewardClaimed events added: %v", numEventsAdded)
	return nil, pastEvents
}
