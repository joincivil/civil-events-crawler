// Code generated by 'gen/eventhandlergen.go'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'gen/filterergen_template.go' for more details
// File was generated at 2019-12-17 16:18:29.539678 +0000 UTC
package filterer

import (
	log "github.com/golang/glog"
	"runtime"
	"sync"

	"github.com/Jeffail/tunny"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	specs "github.com/joincivil/civil-events-crawler/pkg/contractspecs"
	commongen "github.com/joincivil/civil-events-crawler/pkg/generated/common"
	"github.com/joincivil/civil-events-crawler/pkg/model"

	"github.com/joincivil/go-common/pkg/generated/contract"
	ctime "github.com/joincivil/go-common/pkg/time"

	"math/big"
)

func NewCivilTCRContractFilterers(contractAddress common.Address) *CivilTCRContractFilterers {
	contractFilterers := &CivilTCRContractFilterers{
		contractAddress:   contractAddress,
		eventTypes:        commongen.EventTypesCivilTCRContract(),
		eventToStartBlock: make(map[string]uint64),
		lastEvents:        make([]*model.Event, 0),
	}
	for _, eventType := range contractFilterers.eventTypes {
		contractFilterers.eventToStartBlock[eventType] = 0
	}
	return contractFilterers
}

type CivilTCRContractFilterers struct {
	contractAddress   common.Address
	contract          *contract.CivilTCRContract
	eventTypes        []string
	eventToStartBlock map[string]uint64
	lastEvents        []*model.Event
	lastEventsMutex   sync.Mutex
	pastEventsMutex   sync.Mutex
}

func (f *CivilTCRContractFilterers) ContractName() string {
	return "CivilTCRContract"
}

func (f *CivilTCRContractFilterers) ContractAddress() common.Address {
	return f.contractAddress
}

func (f *CivilTCRContractFilterers) StartFilterers(client bind.ContractBackend,
	pastEvents []*model.Event, nonSubOnly bool) ([]*model.Event, error) {
	return f.StartCivilTCRContractFilterers(client, pastEvents, nonSubOnly)
}

func (f *CivilTCRContractFilterers) EventTypes() []string {
	return f.eventTypes
}

func (f *CivilTCRContractFilterers) UpdateStartBlock(eventType string, startBlock uint64) {
	f.eventToStartBlock[eventType] = startBlock
}

func (f *CivilTCRContractFilterers) LastEvents() []*model.Event {
	return f.lastEvents
}

// StartCivilTCRContractFilterers retrieves events for CivilTCRContract
func (f *CivilTCRContractFilterers) StartCivilTCRContractFilterers(client bind.ContractBackend,
	pastEvents []*model.Event, nonSubOnly bool) ([]*model.Event, error) {
	contract, err := contract.NewCivilTCRContract(f.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartCivilTCRContract: err: %v", err)
		return pastEvents, err
	}
	f.contract = contract

	workerMultiplier := 1
	numWorkers := runtime.NumCPU() * workerMultiplier
	pool := tunny.NewFunc(numWorkers, func(payload interface{}) interface{} {
		f := payload.(func())
		f()
		return nil
	})
	defer pool.Close()

	wg := sync.WaitGroup{}
	resultsChan := make(chan []*model.Event)
	done := make(chan struct{})
	filtsRun := 0

	if !specs.IsEventDisabled("CivilTCRContract", "AppealGranted") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "AppealGranted")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["AppealGranted"]
				pevents, e := f.startFilterAppealGranted(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving AppealGranted: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "AppealRequested") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "AppealRequested")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["AppealRequested"]
				pevents, e := f.startFilterAppealRequested(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving AppealRequested: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "Application") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "Application")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["Application"]
				pevents, e := f.startFilterApplication(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving Application: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "ApplicationRemoved") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "ApplicationRemoved")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["ApplicationRemoved"]
				pevents, e := f.startFilterApplicationRemoved(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving ApplicationRemoved: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "ApplicationWhitelisted") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "ApplicationWhitelisted")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["ApplicationWhitelisted"]
				pevents, e := f.startFilterApplicationWhitelisted(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving ApplicationWhitelisted: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "Challenge") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "Challenge")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["Challenge"]
				pevents, e := f.startFilterChallenge(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving Challenge: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "ChallengeFailed") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "ChallengeFailed")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["ChallengeFailed"]
				pevents, e := f.startFilterChallengeFailed(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving ChallengeFailed: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "ChallengeSucceeded") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "ChallengeSucceeded")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["ChallengeSucceeded"]
				pevents, e := f.startFilterChallengeSucceeded(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving ChallengeSucceeded: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "Deposit") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "Deposit")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["Deposit"]
				pevents, e := f.startFilterDeposit(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving Deposit: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "FailedChallengeOverturned") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "FailedChallengeOverturned")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["FailedChallengeOverturned"]
				pevents, e := f.startFilterFailedChallengeOverturned(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving FailedChallengeOverturned: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "GovernmentTransfered") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "GovernmentTransfered")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["GovernmentTransfered"]
				pevents, e := f.startFilterGovernmentTransfered(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving GovernmentTransfered: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "GrantedAppealChallenged") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "GrantedAppealChallenged")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["GrantedAppealChallenged"]
				pevents, e := f.startFilterGrantedAppealChallenged(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving GrantedAppealChallenged: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "GrantedAppealConfirmed") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "GrantedAppealConfirmed")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["GrantedAppealConfirmed"]
				pevents, e := f.startFilterGrantedAppealConfirmed(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving GrantedAppealConfirmed: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "GrantedAppealOverturned") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "GrantedAppealOverturned")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["GrantedAppealOverturned"]
				pevents, e := f.startFilterGrantedAppealOverturned(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving GrantedAppealOverturned: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "ListingRemoved") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "ListingRemoved")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["ListingRemoved"]
				pevents, e := f.startFilterListingRemoved(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving ListingRemoved: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "ListingWithdrawn") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "ListingWithdrawn")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["ListingWithdrawn"]
				pevents, e := f.startFilterListingWithdrawn(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving ListingWithdrawn: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "RewardClaimed") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "RewardClaimed")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["RewardClaimed"]
				pevents, e := f.startFilterRewardClaimed(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving RewardClaimed: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "SuccessfulChallengeOverturned") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "SuccessfulChallengeOverturned")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["SuccessfulChallengeOverturned"]
				pevents, e := f.startFilterSuccessfulChallengeOverturned(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving SuccessfulChallengeOverturned: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "TouchAndRemoved") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "TouchAndRemoved")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["TouchAndRemoved"]
				pevents, e := f.startFilterTouchAndRemoved(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving TouchAndRemoved: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	if !specs.IsEventDisabled("CivilTCRContract", "Withdrawal") && (!nonSubOnly || !specs.IsListenerEnabledForEvent("CivilTCRContract", "Withdrawal")) {
		wg.Add(1)
		go func() {
			filterFunc := func() {
				startBlock := f.eventToStartBlock["Withdrawal"]
				pevents, e := f.startFilterWithdrawal(startBlock, []*model.Event{})
				if e != nil {
					log.Errorf("Error retrieving Withdrawal: err: %v", e)
					return
				}
				if len(pevents) > 0 {
					f.lastEventsMutex.Lock()
					f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
					f.lastEventsMutex.Unlock()
					resultsChan <- pevents
				}
			}
			pool.Process(filterFunc)
			wg.Done()
		}()
		filtsRun++
	}

	go func() {
		wg.Wait()
		close(done)
		log.Info("Filtering routines complete")
	}()

Loop:
	for {
		select {
		case <-done:
			break Loop
		case pevents := <-resultsChan:
			f.pastEventsMutex.Lock()
			pastEvents = append(pastEvents, pevents...)
			f.pastEventsMutex.Unlock()
		}
	}
	log.Infof("Total filterers run: %v, events found: %v", filtsRun, len(pastEvents))
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterAppealGranted(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract AppealGranted for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractAppealGrantedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterAppealGranted(
			opts,
			[]common.Address{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract AppealGranted for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract AppealGranted for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract AppealGranted for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("AppealGranted", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract AppealGranted added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterAppealRequested(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract AppealRequested for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractAppealRequestedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterAppealRequested(
			opts,
			[]common.Address{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract AppealRequested for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract AppealRequested for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract AppealRequested for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("AppealRequested", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract AppealRequested added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterApplication(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract Application for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractApplicationIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterApplication(
			opts,
			[]common.Address{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract Application for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract Application for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract Application for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("Application", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract Application added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterApplicationRemoved(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract ApplicationRemoved for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractApplicationRemovedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterApplicationRemoved(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract ApplicationRemoved for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract ApplicationRemoved for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract ApplicationRemoved for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ApplicationRemoved", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract ApplicationRemoved added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterApplicationWhitelisted(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract ApplicationWhitelisted for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractApplicationWhitelistedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterApplicationWhitelisted(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract ApplicationWhitelisted for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract ApplicationWhitelisted for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract ApplicationWhitelisted for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ApplicationWhitelisted", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract ApplicationWhitelisted added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterChallenge(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract Challenge for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractChallengeIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterChallenge(
			opts,
			[]common.Address{},
			[]*big.Int{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract Challenge for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract Challenge for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract Challenge for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("Challenge", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract Challenge added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterChallengeFailed(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract ChallengeFailed for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractChallengeFailedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterChallengeFailed(
			opts,
			[]common.Address{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract ChallengeFailed for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract ChallengeFailed for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract ChallengeFailed for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ChallengeFailed", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract ChallengeFailed added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterChallengeSucceeded(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract ChallengeSucceeded for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractChallengeSucceededIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterChallengeSucceeded(
			opts,
			[]common.Address{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract ChallengeSucceeded for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract ChallengeSucceeded for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract ChallengeSucceeded for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ChallengeSucceeded", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract ChallengeSucceeded added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterDeposit(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract Deposit for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractDepositIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterDeposit(
			opts,
			[]common.Address{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract Deposit for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract Deposit for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract Deposit for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("Deposit", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract Deposit added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterFailedChallengeOverturned(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract FailedChallengeOverturned for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractFailedChallengeOverturnedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterFailedChallengeOverturned(
			opts,
			[]common.Address{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract FailedChallengeOverturned for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract FailedChallengeOverturned for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract FailedChallengeOverturned for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("FailedChallengeOverturned", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract FailedChallengeOverturned added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterGovernmentTransfered(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract GovernmentTransfered for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractGovernmentTransferedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterGovernmentTransfered(
			opts,
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract GovernmentTransfered for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract GovernmentTransfered for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract GovernmentTransfered for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("GovernmentTransfered", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract GovernmentTransfered added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterGrantedAppealChallenged(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract GrantedAppealChallenged for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractGrantedAppealChallengedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterGrantedAppealChallenged(
			opts,
			[]common.Address{},
			[]*big.Int{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract GrantedAppealChallenged for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract GrantedAppealChallenged for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract GrantedAppealChallenged for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("GrantedAppealChallenged", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract GrantedAppealChallenged added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterGrantedAppealConfirmed(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract GrantedAppealConfirmed for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractGrantedAppealConfirmedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterGrantedAppealConfirmed(
			opts,
			[]common.Address{},
			[]*big.Int{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract GrantedAppealConfirmed for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract GrantedAppealConfirmed for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract GrantedAppealConfirmed for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("GrantedAppealConfirmed", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract GrantedAppealConfirmed added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterGrantedAppealOverturned(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract GrantedAppealOverturned for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractGrantedAppealOverturnedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterGrantedAppealOverturned(
			opts,
			[]common.Address{},
			[]*big.Int{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract GrantedAppealOverturned for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract GrantedAppealOverturned for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract GrantedAppealOverturned for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("GrantedAppealOverturned", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract GrantedAppealOverturned added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterListingRemoved(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract ListingRemoved for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractListingRemovedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterListingRemoved(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract ListingRemoved for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract ListingRemoved for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract ListingRemoved for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ListingRemoved", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract ListingRemoved added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterListingWithdrawn(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract ListingWithdrawn for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractListingWithdrawnIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterListingWithdrawn(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract ListingWithdrawn for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract ListingWithdrawn for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract ListingWithdrawn for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("ListingWithdrawn", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract ListingWithdrawn added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterRewardClaimed(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract RewardClaimed for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractRewardClaimedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterRewardClaimed(
			opts,
			[]*big.Int{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract RewardClaimed for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract RewardClaimed for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract RewardClaimed for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("RewardClaimed", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract RewardClaimed added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterSuccessfulChallengeOverturned(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract SuccessfulChallengeOverturned for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractSuccessfulChallengeOverturnedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterSuccessfulChallengeOverturned(
			opts,
			[]common.Address{},
			[]*big.Int{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract SuccessfulChallengeOverturned for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract SuccessfulChallengeOverturned for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract SuccessfulChallengeOverturned for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("SuccessfulChallengeOverturned", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract SuccessfulChallengeOverturned added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterTouchAndRemoved(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract TouchAndRemoved for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractTouchAndRemovedIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterTouchAndRemoved(
			opts,
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract TouchAndRemoved for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract TouchAndRemoved for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract TouchAndRemoved for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("TouchAndRemoved", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract TouchAndRemoved added: %v", numEventsAdded)
	return pastEvents, nil
}

func (f *CivilTCRContractFilterers) startFilterWithdrawal(startBlock uint64, pastEvents []*model.Event) ([]*model.Event, error) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering CivilTCRContract Withdrawal for %v at block %v", f.contractAddress.Hex(), startBlock)
	var itr *contract.CivilTCRContractWithdrawalIterator
	var err error
	maxRetries := 3
	retry := 0
	for {
		itr, err = f.contract.FilterWithdrawal(
			opts,
			[]common.Address{},
			[]common.Address{},
		)
		if err == nil {
			log.Infof("Done filter: CivilTCRContract Withdrawal for %v", f.contractAddress.Hex())
			break
		}
		if retry >= maxRetries {
			log.Errorf("Failed filter: CivilTCRContract Withdrawal for %v: err: %v", f.contractAddress.Hex(), err)
			return pastEvents, err
		}
		log.Infof("Retrying filter: CivilTCRContract Withdrawal for %v: err: %v", f.contractAddress.Hex(), err)
		retry++
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("Withdrawal", f.ContractName(), f.contractAddress, itr.Event, ctime.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("CivilTCRContract Withdrawal added: %v", numEventsAdded)
	return pastEvents, nil
}
