// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// CivilTCRContractABI is the input ABI used to generate the binding from.
const CivilTCRContractABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"civilVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"government\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"whitelisted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_challengeIDs\",\"type\":\"uint256[]\"},{\"name\":\"_salts\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"appWasMade\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeRequestAppealExpiries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"listings\",\"outputs\":[{\"name\":\"applicationExpiry\",\"type\":\"uint256\"},{\"name\":\"whitelisted\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"unstakedDeposit\",\"type\":\"uint256\"},{\"name\":\"challengeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"challengeExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"resolved\",\"type\":\"bool\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"tokenClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appeals\",\"outputs\":[{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"appealFeePaid\",\"type\":\"uint256\"},{\"name\":\"appealPhaseExpiry\",\"type\":\"uint256\"},{\"name\":\"appealGranted\",\"type\":\"bool\"},{\"name\":\"appealOpenToChallengeExpiry\",\"type\":\"uint256\"},{\"name\":\"appealChallengeID\",\"type\":\"uint256\"},{\"name\":\"overturned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"canBeWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parameterizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddresses\",\"type\":\"address[]\"}],\"name\":\"updateStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"plcr\",\"type\":\"address\"},{\"name\":\"param\",\"type\":\"address\"},{\"name\":\"govt\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"appealFeePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"_AppealRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"_AppealGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_FailedChallengeOverturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_SuccessfulChallengeOverturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"appealChallengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"_GrantedAppealChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"appealChallengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_GrantedAppealOverturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"appealChallengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_GrantedAppealConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newGovernment\",\"type\":\"address\"}],\"name\":\"_GovernmentTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"appEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"_Application\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"commitEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revealEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"_Challenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"_Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrew\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"_Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"_ApplicationWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"_ApplicationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"_ListingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"_ListingWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"_TouchAndRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_ChallengeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_RewardClaimed\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"apply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"requestAppeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"grantAppeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGovernment\",\"type\":\"address\"}],\"name\":\"transferGovernment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"updateStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"challenge\",\"outputs\":[{\"name\":\"challengeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"challengeGrantedAppeal\",\"outputs\":[{\"name\":\"challengeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"challengeID\",\"type\":\"uint256\"}],\"name\":\"determineReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"challengeID\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"voterReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"challengeCanBeResolved\",\"outputs\":[{\"name\":\"canBeResolved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"appealCanBeResolved\",\"outputs\":[{\"name\":\"canBeResolved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listingAddress\",\"type\":\"address\"}],\"name\":\"appealChallengeCanBeResolved\",\"outputs\":[{\"name\":\"canBeResolved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// CivilTCRContractBin is the compiled bytecode used for deploying new contracts.
const CivilTCRContractBin = `0x60806040523480156200001157600080fd5b506040516080806200543d833981016040818152825160208085015183860151606090960151848601909452600885527f436976696c54435200000000000000000000000000000000000000000000000091850191909152909390929091908490849084908383838383838383600160a060020a0384161515620000f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5f746f6b656e2061646472657373206973203000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03831615156200016e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5f766f74696e6720616464726573732069732030000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382161515620001e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5f706172616d65746572697a6572206164647265737320697320300000000000604482015290519081900360640190fd5b60028054600160a060020a03808716600160a060020a03199283161790925560038054868416908316179055600480549285169290911691909117905580516200023890600590602084019062000418565b50505050600160a060020a038a1615159850620002bf97505050505050505057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f676f7674206164647265737320776173207a65726f0000000000000000000000604482015290519081900360640190fd5b80600160a060020a0316635793b9cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200031757600080fd5b505af11580156200032c573d6000803e3d6000fd5b505050506040513d60208110156200034357600080fd5b5051600160a060020a03161515620003e257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f676f76742e676574476f7665726e6d656e74436f6e74726f6c6c65722061646460448201527f7265737320776173203000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60068054600160a060020a03948516600160a060020a031991821617909155600780549290941691161790915550620004bd9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200045b57805160ff19168380011785556200048b565b828001600101855582156200048b579182015b828111156200048b5782518255916020019190600101906200046e565b50620004999291506200049d565b5090565b620004ba91905b80821115620004995760008155600101620004a4565b90565b614f7080620004cd6000396000f3006080604052600436106101875763ffffffff60e060020a60003504166301162b93811461018c57806306fdde03146101af5780630aac454314610239578063120c40c61461026e5780631e39d8d7146102e757806325ecef04146103185780632672f526146103395780632ea9b6961461034e5780633af32abf1461036f57806347e7ef241461039057806355246b9c146103b45780635b5d4e731461041d5780635f02116f1461043e57806361a9a8ca146104cc57806364c37318146104ed57806365d96c82146105055780636eefcab91461055957806386bb8f371461057a5780638f1d377614610595578063a5ba3b1e146105e0578063a7aad3db14610604578063acff86871461062b578063b42652e914610687578063bc4b010f146106a8578063c8187cf11461070f578063c931674b14610727578063dd4e7cfd14610754578063e1e3f91514610775578063f3fef3a31461078a578063f4c8cfc5146107ae578063f96c8720146107db578063fc0c546a14610830578063fce1ccca14610845575b600080fd5b34801561019857600080fd5b506101ad600160a060020a036004351661085a565b005b3480156101bb57600080fd5b506101c46108be565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fe5781810151838201526020016101e6565b50505050905090810190601f16801561022b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024557600080fd5b5061025a600160a060020a036004351661094c565b604080519115158252519081900360200190f35b34801561027a57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102d5958335600160a060020a0316953695604494919390910191908190840183828082843750949750610aaf9650505050505050565b60408051918252519081900360200190f35b3480156102f357600080fd5b506102fc6111ce565b60408051600160a060020a039092168252519081900360200190f35b34801561032457600080fd5b5061025a600160a060020a03600435166111dd565b34801561034557600080fd5b506102fc6112d6565b34801561035a57600080fd5b5061025a600160a060020a03600435166112e5565b34801561037b57600080fd5b5061025a600160a060020a03600435166113c0565b34801561039c57600080fd5b506101ad600160a060020a03600435166024356113e2565b3480156103c057600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101ad948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506115889650505050505050565b34801561042957600080fd5b506101ad600160a060020a0360043516611598565b34801561044a57600080fd5b50604080516020600480358082013583810280860185019096528085526101ad95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061175d9650505050505050565b3480156104d857600080fd5b5061025a600160a060020a036004351661182c565b3480156104f957600080fd5b506102d5600435611848565b34801561051157600080fd5b50610526600160a060020a036004351661185a565b604080519586529315156020860152600160a060020a039092168484015260608401526080830152519081900360a00190f35b34801561056557600080fd5b5061025a600160a060020a0360043516611895565b34801561058657600080fd5b506101ad6004356024356118e0565b3480156105a157600080fd5b506105ad600435611b59565b60408051958652600160a060020a0390941660208601529115158484015260608401526080830152519081900360a00190f35b3480156105ec57600080fd5b5061025a600435600160a060020a0360243516611b95565b34801561061057600080fd5b506102d5600160a060020a0360043516602435604435611bc3565b34801561063757600080fd5b50610643600435611c06565b60408051600160a060020a0390981688526020880196909652868601949094529115156060860152608085015260a0840152151560c0830152519081900360e00190f35b34801561069357600080fd5b506101ad600160a060020a0360043516611c53565b3480156106b457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102d5958335600160a060020a0316953695604494919390910191908190840183828082843750949750611e429650505050505050565b34801561071b57600080fd5b506102d5600435612098565b34801561073357600080fd5b506101ad60048035600160a060020a031690602480359081019101356123bd565b34801561076057600080fd5b5061025a600160a060020a03600435166126b5565b34801561078157600080fd5b506102fc612757565b34801561079657600080fd5b506101ad600160a060020a0360043516602435612766565b3480156107ba57600080fd5b506101ad60048035600160a060020a03169060248035908101910135612b0c565b3480156107e757600080fd5b50604080516020600480358082013583810280860185019096528085526101ad95369593946024949385019291829185019084908082843750949750612ff79650505050505050565b34801561083c57600080fd5b506102fc61302f565b34801561085157600080fd5b506102fc61303e565b610863816126b5565b15610876576108718161304d565b6108bb565b61087f816112e5565b1561088d5761087181613073565b610896816111dd565b156108a457610871816133d2565b6108ad8161094c565b15610187576108718161356e565b50565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b505050505081565b600160a060020a0381166000908152600160209081526040808320600301548084526009909252822061097e84611895565b15156109f9576040805160e560020a62461bcd028152602060048201526024808201527f4368616c6c656e676520646f6573206e6f7420657869737420666f72206c697360448201527f74696e6700000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60058101541515610a0d5760009250610aa8565b6003546005820154604080517fee684830000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a039092169163ee684830916024808201926020929091908290030181600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b505050506040513d6020811015610aa357600080fd5b505192505b5050919050565b600160a060020a0382166000908152600160209081526040808320600380820154855260099093529083209182015490919083908190819060ff161515610b40576040805160e560020a62461bcd02815260206004820152601260248201527f41707065616c206e6f74206772616e7465640000000000000000000000000000604482015290519081900360640190fd5b600584015415610b9a576040805160e560020a62461bcd02815260206004820152601960248201527f41707065616c20616c7265616479206368616c6c656e67656400000000000000604482015290519081900360640190fd5b60048401544210610c1b576040805160e560020a62461bcd02815260206004820152602260248201527f41707065616c206e6f206c6f6e676572206f70656e20746f206368616c6c656e60448201527f6765000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003546007546040805160e160020a63349f642f028152602060048201819052601460248301527f61707065616c566f746550657263656e7461676500000000000000000000000060448301529151600160a060020a03948516946332ed3d6094169263693ec85e92606480820193918290030181600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d6020811015610ccb57600080fd5b5051600480546040805160e160020a63349f642f0281526020938101849052601860248201527f6368616c6c656e676541707065616c436f6d6d69744c656e000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b158015610d4757600080fd5b505af1158015610d5b573d6000803e3d6000fd5b505050506040513d6020811015610d7157600080fd5b5051600480546040805160e160020a63349f642f0281526020938101849052601860248201527f6368616c6c656e676541707065616c52657665616c4c656e000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b505050506040513d6020811015610e1757600080fd5b50516040805160e060020a63ffffffff87160281526004810194909452602484019290925260448301525160648083019260209291908290030181600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505050506040513d6020811015610e8d57600080fd5b505160018501546007546040805160e160020a63349f642f028152602060048201819052602260248301527f61707065616c4368616c6c656e6765566f746544697370656e736174696f6e5060448301527f63740000000000000000000000000000000000000000000000000000000000006064838101919091529251959850919650610fa1948794610f95949093610f8993600160a060020a039092169263693ec85e9260848082019392918290030181600087803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b505050506040513d6020811015610f7a57600080fd5b5051879063ffffffff61398016565b9063ffffffff61399216565b9063ffffffff6139bb16565b6040805160a081018252828152336020808301828152600084860181815260018c8101805460608901908152608089018581528e86528588528a862099518a5595519289018054945173ffffffffffffffffffffffffffffffffffffffff19909516600160a060020a039485161774ff0000000000000000000000000000000000000000191660a060020a95151595909502949094179093559151600280890191909155935160039097019690965560058c018b905591549154865160e060020a6323b872dd028152600481019590955230602486015260448501529451959650909216936323b872dd93606480840194938390030190829087803b1580156110a957600080fd5b505af11580156110bd573d6000803e3d6000fd5b505050506040513d60208110156110d357600080fd5b50511515611119576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b82856003015489600160a060020a03167fedfe36bf00610fb3b5474f1efd2de0d52ffb9a50b056ee37c33cea805fd441618a6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611188578181015183820152602001611170565b50505050905090810190601f1680156111b55780820380516001836020036101000a031916815260200191505b509250505060405180910390a450909695505050505050565b600654600160a060020a031681565b600160a060020a0381166000908152600160209081526040808320600301548084526009909252822061120f84611895565b151561128a576040805160e560020a62461bcd028152602060048201526024808201527f4368616c6c656e676520646f6573206e6f7420657869737420666f72206c697360448201527f74696e6700000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002810154151561129e5760009250610aa8565b600381015460ff1615156112ba57428160020154109250610aa8565b4281600401541080156112cf57506005810154155b9250610aa8565b600754600160a060020a031681565b600160a060020a03811660009081526001602052604081206003015461130a83611895565b1515611385576040805160e560020a62461bcd028152602060048201526024808201527f4368616c6c656e676520646f6573206e6f7420657869737420666f72206c697360448201527f74696e6700000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000818152600860205260409020544210156113a457600091506113ba565b6000818152600960205260409020600201541591505b50919050565b600160a060020a03166000908152600160208190526040909120015460ff1690565b600160a060020a038083166000908152600160208190526040909120908101549091610100909104163314611461576040805160e560020a62461bcd02815260206004820152601e60248201527f53656e646572206973206e6f74206f776e6572206f66204c697374696e670000604482015290519081900360640190fd5b6002808201805484019055546040805160e060020a6323b872dd028152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156114c757600080fd5b505af11580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b50511515611537576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b600281015460408051848152602081019290925280513392600160a060020a038716927ffc2e298800eb7bcacdea96213f53962a6bdf27d2a560f831d4e42301492e8f6a92918290030190a3505050565b6115938383836139d0565b505050565b600760009054906101000a9004600160a060020a0316600160a060020a0316635793b9cf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115eb57600080fd5b505af11580156115ff573d6000803e3d6000fd5b505050506040513d602081101561161557600080fd5b5051600160a060020a0316331461169c576040805160e560020a62461bcd02815260206004820152602860248201527f73656e64657220776173206e6f742074686520476f7665726e6d656e7420436f60448201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03811615156116fc576040805160e560020a62461bcd02815260206004820152601b60248201527f4e657720476f7665726e6d656e74206164647265737320697320300000000000604482015290519081900360640190fd5b60078054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f016b4781993f669e6eac42012fead2d96f8381769b4efbb4ad686cca6031ea889181900360200190a150565b80518251600091146117df576040805160e560020a62461bcd02815260206004820152603960248201527f4d69736d6174636820696e206c656e677468206f66205f6368616c6c656e676560448201527f49447320616e64205f73616c747320706172616d657465727300000000000000606482015290519081900360840190fd5b5060005b82518110156115935761182483828151811015156117fd57fe5b90602001906020020151838381518110151561181557fe5b906020019060200201516118e0565b6001016117e3565b600160a060020a03166000908152600160205260408120541190565b60086020526000908152604090205481565b6001602081905260009182526040909120805491810154600282015460039092015460ff821692610100909204600160a060020a0316919085565b600160a060020a03811660009081526001602052604081206003015481811180156118d9575060008181526020819052604090206001015460a060020a900460ff16155b9392505050565b600082815260208181526040808320338452600401909152812054819060ff1615611955576040805160e560020a62461bcd02815260206004820152601660248201527f52657761726420616c726561647920636c61696d656400000000000000000000604482015290519081900360640190fd5b600084815260208190526040902060019081015460a060020a900460ff161515146119ca576040805160e560020a62461bcd02815260206004820152601a60248201527f4368616c6c656e6765206e6f7420796574207265736f6c766564000000000000604482015290519081900360640190fd5b6119d5338585613ab3565b91506119e2338585611bc3565b600085815260208190526040902060030154909150611a07908363ffffffff61398016565b6000858152602081905260409020600381019190915554611a2e908263ffffffff61398016565b6000858152602081815260408083209384553380845260049485018352818420805460ff19166001179055600254825160e060020a63a9059cbb02815295860191909152602485018690529051600160a060020a03919091169363a9059cbb9360448083019493928390030190829087803b158015611aac57600080fd5b505af1158015611ac0573d6000803e3d6000fd5b505050506040513d6020811015611ad657600080fd5b50511515611b1c576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b604080518281529051339186917f6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f599579181900360200190a350505050565b60006020819052908152604090208054600182015460028301546003909301549192600160a060020a0382169260a060020a90920460ff169185565b600082815260208181526040808320600160a060020a038516845260040190915290205460ff165b92915050565b60008281526020819052604081206003810154815483611be4888888613ab3565b9050611bfa83610f95838563ffffffff61399216565b98975050505050505050565b6009602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154600160a060020a03909516959394929360ff92831693919290911687565b600160a060020a038082166000908152600160208190526040909120908101549091336101009092041614611cd2576040805160e560020a62461bcd02815260206004820152601e60248201527f53656e646572206973206e6f74206f776e6572206f66206c697374696e670000604482015290519081900360640190fd5b611cdb826113c0565b1515611d57576040805160e560020a62461bcd02815260206004820152602860248201527f4c697374696e67206d7573742062652077686974656c697374656420746f206260448201527f6520657869746564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60038101541580611d855750600381015460009081526020819052604090206001015460a060020a900460ff165b1515611e01576040805160e560020a62461bcd02815260206004820152603660248201527f4c697374696e67206d757374206e6f74206861766520616e206163746976652060448201527f6368616c6c656e676520746f2062652065786974656400000000000000000000606482015290519081900360840190fd5b611e0a82613c0f565b604051600160a060020a038316907f09a024f7311a15ac363521bddca1d9937c4244ab9a25e6c968e610b35ecc750390600090a25050565b6000806000611e518585613df1565b91506000821115612090576007546040805160e160020a63349f642f028152602060048201819052601060248301527f7265717565737441707065616c4c656e000000000000000000000000000000006044830152915161206e93600160a060020a03169263693ec85e92606480820193918290030181600087803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b505050506040513d6020811015611f0357600080fd5b5051600480546040805160e160020a63349f642f0281526020938101849052600e60248201527f72657665616c53746167654c656e0000000000000000000000000000000000006044820152905161206293600160a060020a039093169263693ec85e92606480820193918290030181600087803b158015611f8457600080fd5b505af1158015611f98573d6000803e3d6000fd5b505050506040513d6020811015611fae57600080fd5b5051600480546040805160e160020a63349f642f0281526020938101849052600e60248201527f636f6d6d697453746167654c656e00000000000000000000000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b15801561202a57600080fd5b505af115801561203e573d6000803e3d6000fd5b505050506040513d602081101561205457600080fd5b50519063ffffffff61469916565b9063ffffffff61469916565b9050612080428263ffffffff61469916565b6000838152600860205260409020555b509392505050565b600081815260208190526040812060010154819060a060020a900460ff161561210b576040805160e560020a62461bcd02815260206004820152601a60248201527f4368616c6c656e676520616c7265616479207265736f6c766564000000000000604482015290519081900360640190fd5b600354604080517fee684830000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163ee684830916024808201926020929091908290030181600087803b15801561217257600080fd5b505af1158015612186573d6000803e3d6000fd5b505050506040513d602081101561219c57600080fd5b505115156121f4576040805160e560020a62461bcd02815260206004820181905260248201527f506f6c6c20666f72206368616c6c656e676520686173206e6f7420656e646564604482015290519081900360640190fd5b60008381526009602052604090206003015460ff168015612227575060008381526009602052604090206006015460ff16155b905080156122e957600654604080517fe8cfa3f0000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163e8cfa3f0916024808201926020929091908290030181600087803b15801561229657600080fd5b505af11580156122aa573d6000803e3d6000fd5b505050506040513d60208110156122c057600080fd5b505115156122e45760008381526020819052604090206002908101540291506113ba565b61239e565b600354604080517f053e71a6000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163053e71a6916024808201926020929091908290030181600087803b15801561235057600080fd5b505af1158015612364573d6000803e3d6000fd5b505050506040513d602081101561237a57600080fd5b5051151561239e5760008381526020819052604090206002908101540291506113ba565b5050600090815260208190526040902080546002918201549091020390565b600080600760009054906101000a9004600160a060020a0316600160a060020a03166356e1fb886040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561241357600080fd5b505af1158015612427573d6000803e3d6000fd5b505050506040513d602081101561243d57600080fd5b5051600160a060020a0316331461249e576040805160e560020a62461bcd02815260206004820152601c60248201527f73656e64657220776173206e6f742074686520417070656c6c61746500000000604482015290519081900360640190fd5b5050600160a060020a038316600090815260016020908152604080832060038101548452600990925290912060028101544210612525576040805160e560020a62461bcd02815260206004820152601d60248201527f4a756467652041707065616c207068617365206e6f7420616374697665000000604482015290519081900360640190fd5b600381015460ff1615612582576040805160e560020a62461bcd02815260206004820152601f60248201527f41707065616c2068617320616c7265616479206265656e206772616e74656400604482015290519081900360640190fd5b60038101805460ff19166001179055600480546040805160e160020a63349f642f0281526020938101849052601260248201527f6368616c6c656e676541707065616c4c656e00000000000000000000000000006044820152905161264993600160a060020a039093169263693ec85e92606480820193918290030181600087803b15801561261057600080fd5b505af1158015612624573d6000803e3d6000fd5b505050506040513d602081101561263a57600080fd5b5051429063ffffffff61469916565b600482015560038201546040805160208082528101869052600160a060020a038816917f85f61fe0f1b618d4efbf918ec1be0591560df9463fe15cbfb435c3537a1fc1029188918891908190810184848082843760405192018290039550909350505050a35050505050565b600160a060020a0381166000908152600160205260408120600301546126da8361182c565b80156126fd5750600160a060020a03831660009081526001602052604090205442115b801561270f575061270d836113c0565b155b801561274057508015806127405750600081815260208190526040902060019081015460a060020a900460ff161515145b1561274e57600191506113ba565b50600092915050565b600454600160a060020a031681565b600160a060020a0380831660009081526001602081905260409091209081015490916101009091041633146127e5576040805160e560020a62461bcd02815260206004820152601e60248201527f53656e646572206973206e6f74206f776e6572206f66206c697374696e670000604482015290519081900360640190fd5b6002810154821115612867576040805160e560020a62461bcd02815260206004820152603260248201527f43616e6e6f74207769746864726177206d6f7265207468616e2063757272656e60448201527f7420756e7374616b6564206465706f7369740000000000000000000000000000606482015290519081900360840190fd5b600381015415806128955750600381015460009081526020819052604090206001015460a060020a900460ff165b156129ea57600480546040805160e160020a63349f642f0281526020938101849052600a60248201527f6d696e4465706f7369740000000000000000000000000000000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b505050506040513d602081101561293e57600080fd5b5051600282015483900310156129ea576040805160e560020a62461bcd02815260206004820152605060248201527f5769746864726177616c2070726f686962697469656420617320697420776f7560448201527f6c6420707574204c697374696e6720756e7374616b6564206465706f7369742060648201527f62656c6f77206d696e4465706f73697400000000000000000000000000000000608482015290519081900360a40190fd5b600280820180548490039055546040805160e060020a63a9059cbb028152336004820152602481018590529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015612a4b57600080fd5b505af1158015612a5f573d6000803e3d6000fd5b505050506040513d6020811015612a7557600080fd5b50511515612abb576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b600281015460408051848152602081019290925280513392600160a060020a038716927f7b7771adeec078e4a338f627a52f307a7fd66d915cb133b5ace441bed26abc0b92918290030190a3505050565b600160a060020a038084166000908152600160209081526040808320600380549082015483517fee684830000000000000000000000000000000000000000000000000000000008152600481019190915292519195859491169263ee684830926024808301939282900301818787803b158015612b8857600080fd5b505af1158015612b9c573d6000803e3d6000fd5b505050506040513d6020811015612bb257600080fd5b50511515612c30576040805160e560020a62461bcd02815260206004820152602860248201527f506f6c6c20666f72206c697374696e67206368616c6c656e676520686173206e60448201527f6f7420656e646564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60038301546000908152600860205260409020544210612c9a576040805160e560020a62461bcd02815260206004820152601c60248201527f526571756573742041707065616c207068617365206973206f76657200000000604482015290519081900360640190fd5b6003830154600090815260096020526040902054600160a060020a031615612d32576040805160e560020a62461bcd02815260206004820152602f60248201527f41707065616c20666f722074686973206368616c6c656e67652068617320616c60448201527f7265616479206265656e206d6164650000000000000000000000000000000000606482015290519081900360840190fd5b6007546040805160e160020a63349f642f028152602060048201819052600960248301527f61707065616c466565000000000000000000000000000000000000000000000060448301529151600160a060020a039093169263693ec85e926064808401939192918290030181600087803b158015612daf57600080fd5b505af1158015612dc3573d6000803e3d6000fd5b505050506040513d6020811015612dd957600080fd5b505160038401546000908152600960209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19163317815560018101859055600754825160e160020a63349f642f02815260048101859052600e60248201527f6a7564676541707065616c4c656e00000000000000000000000000000000000060448201529251959750909550612e9a94600160a060020a03919091169363693ec85e93606480850194919392918390030190829087803b15801561261057600080fd5b600280830191909155546040805160e060020a6323b872dd028152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015612efe57600080fd5b505af1158015612f12573d6000803e3d6000fd5b505050506040513d6020811015612f2857600080fd5b50511515612f6e576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b826003015486600160a060020a03167fdb6f1c08edff9a1f7e425164118b0473e04404404b2c2d38d6e96e41fcbc7fb1843389896040518085815260200184600160a060020a0316600160a060020a03168152602001806020018281038252848482818152602001925080828437604051920182900397509095505050505050a3505050505050565b60005b815181101561302b57613023828281518110151561301457fe5b9060200190602002015161085a565b600101612ffa565b5050565b600254600160a060020a031681565b600354600160a060020a031681565b613056816146a6565b600160a060020a0316600090815260016020526040812060030155565b600160a060020a0381166000908152600160205260408120600301549061309982612098565b600083815260208181526040808320600101805474ff0000000000000000000000000000000000000000191660a060020a17905560035481517f053e71a6000000000000000000000000000000000000000000000000000000008152600481018890529151949550600160a060020a03169363053e71a693602480840194938390030190829087803b15801561312e57600080fd5b505af1158015613142573d6000803e3d6000fd5b505050506040513d602081101561315857600080fd5b5051600083815260208181526040808320600390810194909455925483517f49403183000000000000000000000000000000000000000000000000000000008152600481018790529351600160a060020a039091169363494031839360248083019493928390030190829087803b1580156131d257600080fd5b505af11580156131e6573d6000803e3d6000fd5b505050506040513d60208110156131fc57600080fd5b5051156132805761320c8361304d565b600160a060020a038316600081815260016020908152604080832060020180548601905585835282825291829020805460039091015483519182529181019190915281518593927f3639145ca0a6a8008912a972730b5c8634e1fd1555ea44a257a8de53c30d72fb928290030190a3611593565b61328983613c0f565b60025460008381526020818152604080832060010154815160e060020a63a9059cbb028152600160a060020a03918216600482015260248101879052915194169363a9059cbb93604480840194938390030190829087803b1580156132ed57600080fd5b505af1158015613301573d6000803e3d6000fd5b505050506040513d602081101561331757600080fd5b5051151561336f576040805160e560020a62461bcd02815260206004820152601660248201527f546f6b656e207472616e73666572206661696c75726500000000000000000000604482015290519081900360640190fd5b60008281526020818152604091829020805460039091015483519182529181019190915281518492600160a060020a038716927fe86031b52c5a57c0768c3f196b63abf60b5ed012de77ce1bb88fc63588f7603a929081900390910190a3505050565b600160a060020a03811660009081526001602090815260408083206003808201548552600990935290832091820154909290819060ff16156134ec576134178561472a565b600254835460018501546040805160e060020a63a9059cbb028152600160a060020a039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561347757600080fd5b505af115801561348b573d6000803e3d6000fd5b505050506040513d60208110156134a157600080fd5b505115156134e7576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b613567565b60038401546000908152602081905260409020600184015490925061351890600263ffffffff6139bb16565b825490915061352d908263ffffffff61469916565b8255600183015461355990613548908363ffffffff61398016565b60028401549063ffffffff61469916565b600283015561356785613073565b5050505050565b600160a060020a03811660009081526001602090815260408083206003810154808552600984528285206005810154808752948690529285209194909391906135b683612098565b60018301805474ff0000000000000000000000000000000000000000191660a060020a179055600354604080517f053e71a6000000000000000000000000000000000000000000000000000000008152600481018790529051929350600160a060020a039091169163053e71a6916024808201926020929091908290030181600087803b15801561364657600080fd5b505af115801561365a573d6000803e3d6000fd5b505050506040513d602081101561367057600080fd5b505160038084019190915554604080517f49403183000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216916349403183916024808201926020929091908290030181600087803b1580156136e057600080fd5b505af11580156136f4573d6000803e3d6000fd5b505050506040513d602081101561370a57600080fd5b50511561384f5760068401805460ff1916600117905561372987613073565b60025460018301546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561378757600080fd5b505af115801561379b573d6000803e3d6000fd5b505050506040513d60208110156137b157600080fd5b505115156137f7576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b828588600160a060020a03167fc49556ab8bcbdd0403e98b6dac260ac86008640cda2a5a229c895353b87f2feb85600001548660030154604051808381526020018281526020019250505060405180910390a4613977565b6138588761472a565b60025484546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156138b357600080fd5b505af11580156138c7573d6000803e3d6000fd5b505050506040513d60208110156138dd57600080fd5b50511515613923576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b828588600160a060020a03167f8a7e8d1076fec4f93e4d57111b034ab3975009f601977350c4542e15d2e8b0f685600001548660030154604051808381526020018281526020019250505060405180910390a45b50505050505050565b60008282111561398c57fe5b50900390565b60008215156139a357506000611bbd565b508181028183828115156139b357fe5b0414611bbd57fe5b600081838115156139c857fe5b049392505050565b82600081905033600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613a1e57600080fd5b505af1158015613a32573d6000803e3d6000fd5b505050506040513d6020811015613a4857600080fd5b5051600160a060020a031614613aa8576040805160e560020a62461bcd02815260206004820152601f60248201527f53656e646572206973206e6f74206f776e6572206f6620636f6e747261637400604482015290519081900360640190fd5b613567858585614a5d565b600082815260096020526040812060030154819060ff168015613ae8575060008481526009602052604090206006015460ff16155b90508015613b9957600654604080517f6afa97a8000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152602482018890526044820187905291519190921691636afa97a89160648083019260209291908290030181600087803b158015613b6657600080fd5b505af1158015613b7a573d6000803e3d6000fd5b505050506040513d6020811015613b9057600080fd5b50519150612090565b600354604080517fb43bd069000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052604482018790529151919092169163b43bd0699160648083019260209291908290030181600087803b158015613b6657600080fd5b600160a060020a0381166000908152600160208190526040822090810154909190819060ff1615613c7357604051600160a060020a038516907f5aebb54d5afe29103adbc464fd4e0313af619f4d19f10a0209128b76cd9d0b0790600090a2613ca8565b604051600160a060020a038516907f8ad9ca8735c55207756208e8f59c7693e83d234fc6c8af2713f266468edff87190600090a25b5050600181810154600280840154600160a060020a038681166000908152602086905260408120818155958601805474ffffffffffffffffffffffffffffffffffffffffff19169055928501839055600390940182905561010090920490921691811115613deb576002546040805160e060020a63a9059cbb028152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015613d6957600080fd5b505af1158015613d7d573d6000803e3d6000fd5b505050506040513d6020811015613d9357600080fd5b50511515613deb576040805160e560020a62461bcd02815260206004820152601660248201527f546f6b656e207472616e73666572206661696c75726500000000000000000000604482015290519081900360640190fd5b50505050565b600160a060020a03808316600090815260016020908152604080832060048054835160e160020a63349f642f028152918201859052600a60248301527f6d696e4465706f73697400000000000000000000000000000000000000000000604483015292519495919486948594859485948594929091169263693ec85e9260648084019382900301818787803b158015613e8957600080fd5b505af1158015613e9d573d6000803e3d6000fd5b505050506040513d6020811015613eb357600080fd5b50519450613ec08961182c565b80613ecf5750600186015460ff165b1515613f71576040805160e560020a62461bcd02815260206004820152604c60248201527f4c697374696e67206d75737420626520696e206170706c69636174696f6e207060448201527f68617365206f7220616c72656164792077686974656c697374656420746f206260648201527f65206368616c6c656e6765640000000000000000000000000000000000000000608482015290519081900360a40190fd5b60038601541580613f9f5750600386015460009081526020819052604090206001015460a060020a900460ff165b151561401b576040805160e560020a62461bcd02815260206004820152603760248201527f4c697374696e67206d757374206e6f742068617665206163746976652063686160448201527f6c6c656e676520746f206265206368616c6c656e676564000000000000000000606482015290519081900360840190fd5b848660020154101561406d5761403089613c0f565b604051600160a060020a038a16907fc88462fa6972b64560d1dd34c4d66f2ff9841b2f974bdb0fab0827133d692f6490600090a26000965061468d565b600354600480546040805160e160020a63349f642f0281526020938101849052600a60248201527f766f746551756f72756d0000000000000000000000000000000000000000000060448201529051600160a060020a03948516946332ed3d609493169263693ec85e92606480820193918290030181600087803b1580156140f457600080fd5b505af1158015614108573d6000803e3d6000fd5b505050506040513d602081101561411e57600080fd5b5051600480546040805160e160020a63349f642f0281526020938101849052600e60248201527f636f6d6d697453746167654c656e00000000000000000000000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b15801561419a57600080fd5b505af11580156141ae573d6000803e3d6000fd5b505050506040513d60208110156141c457600080fd5b5051600480546040805160e160020a63349f642f0281526020938101849052600e60248201527f72657665616c53746167654c656e00000000000000000000000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b15801561424057600080fd5b505af1158015614254573d6000803e3d6000fd5b505050506040513d602081101561426a57600080fd5b50516040805160e060020a63ffffffff87160281526004810194909452602484019290925260448301525160648083019260209291908290030181600087803b1580156142b657600080fd5b505af11580156142ca573d6000803e3d6000fd5b505050506040513d60208110156142e057600080fd5b50516040805160a0810180835260045460e160020a63349f642f02909152602060a48301819052600f60c48401527f64697370656e736174696f6e506374000000000000000000000000000000000060e4840152925193975060649650909283926143bb928892610f95928c92610f8992600160a060020a039091169163693ec85e91610104808b01929190818c030181600087803b15801561438257600080fd5b505af1158015614396573d6000803e3d6000fd5b505050506040513d60208110156143ac57600080fd5b50518a9063ffffffff61398016565b81523360208083018290526000604080850182905260608086018c905260809586018390528a835282845281832087518155878501516001820180548a86015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039384161774ff0000000000000000000000000000000000000000191660a060020a91151591909102179055918801516002808301919091559790960151600396870155948c018a90558b860180548c900390559454855160e060020a6323b872dd0281526004810194909452306024850152604484018b9052945194909316936323b872dd936064808501948390030190829087803b1580156144be57600080fd5b505af11580156144d2573d6000803e3d6000fd5b505050506040513d60208110156144e857600080fd5b5051151561452e576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b600354604080517f6148fed5000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a0390921691636148fed59160248082019260a0929091908290030181600087803b15801561459557600080fd5b505af11580156145a9573d6000803e3d6000fd5b505050506040513d60a08110156145bf57600080fd5b5080516020918201516040805180850184905290810182905260608082528c51908201528b5192955090935033928792600160a060020a038e16927f9a8e3864cbacafc5547b8567796b4d12d51217a879192b61932f5151ce581310928e92899289929091829160808301919087019080838360005b8381101561464d578181015183820152602001614635565b50505050905090810190601f16801561467a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a48396505b50505050505092915050565b81810182811015611bbd57fe5b600160a060020a0381166000908152600160208190526040909120015460ff16151561470157604051600160a060020a038216907fb268dc7f76f496fd307b40e0a3b57631a7e46123d9f708b1573bd4efbba3bdba90600090a25b600160a060020a031660009081526001602081905260409091208101805460ff19169091179055565b600160a060020a0381166000908152600160209081526040808320600381015480855292849052908320909261475f83612098565b60018301805474ff0000000000000000000000000000000000000000191660a060020a179055600654604080517fe8cfa3f0000000000000000000000000000000000000000000000000000000008152600481018790529051929350600160a060020a039091169163e8cfa3f0916024808201926020929091908290030181600087803b1580156147ef57600080fd5b505af1158015614803573d6000803e3d6000fd5b505050506040513d602081101561481957600080fd5b505160038084019190915554604080517f49403183000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216916349403183916024808201926020929091908290030181600087803b15801561488957600080fd5b505af115801561489d573d6000803e3d6000fd5b505050506040513d60208110156148b357600080fd5b50511515614931576148c48561304d565b60028401546148d9908263ffffffff61469916565b60028501558154600383015460408051928352602083019190915280518592600160a060020a038916927f72506b3ce4d8f0cf8cf6ccb7cd5281af2b0d020121fb20abfa073eeb3f6d296e92918290030190a3613567565b61493a85613c0f565b60025460018301546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561499857600080fd5b505af11580156149ac573d6000803e3d6000fd5b505050506040513d60208110156149c257600080fd5b50511515614a08576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b8154600383015460408051928352602083019190915280518592600160a060020a038916927f446922bbfdaa528d4a969857cd0894d6bf8bbff52226624e752b3f1be7513b0a92918290030190a35050505050565b82803b60008111614ab8576040805160e560020a62461bcd02815260206004820152601960248201527f41646472657373206973206e6f74206120636f6e747261637400000000000000604482015290519081900360640190fd5b6135678585856000614ac9846113c0565b15614b1e576040805160e560020a62461bcd02815260206004820152601b60248201527f4c697374696e6720616c72656164792077686974656c69737465640000000000604482015290519081900360640190fd5b614b278461182c565b15614ba2576040805160e560020a62461bcd02815260206004820152602960248201527f4170706c69636174696f6e20616c7265616479206d61646520666f722074686960448201527f7320616464726573730000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600480546040805160e160020a63349f642f0281526020938101849052600a60248201527f6d696e4465706f7369740000000000000000000000000000000000000000000060448201529051600160a060020a039092169263693ec85e926064808401938290030181600087803b158015614c1c57600080fd5b505af1158015614c30573d6000803e3d6000fd5b505050506040513d6020811015614c4657600080fd5b5051831015614cc5576040805160e560020a62461bcd02815260206004820152602360248201527f4465706f73697420616d6f756e74206e6f742061626f7665206d696e4465706f60448201527f7369740000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50600160a060020a038381166000908152600160208181526040808420928301805474ffffffffffffffffffffffffffffffffffffffff001916336101000217905560048054825160e160020a63349f642f028152918201849052600d60248301527f6170706c7953746167654c656e00000000000000000000000000000000000000604483015291519395614d7c9592169363693ec85e9360648084019491938390030190829087803b15801561261057600080fd5b815560028082018490555460018201546040805160e060020a6323b872dd028152610100909204600160a060020a0390811660048401523060248401526044830187905290519216916323b872dd916064808201926020929091908290030181600087803b158015614ded57600080fd5b505af1158015614e01573d6000803e3d6000fd5b505050506040513d6020811015614e1757600080fd5b50511515614e5d576040805160e560020a62461bcd0281526020600482015260156024820152600080516020614f25833981519152604482015290519081900360640190fd5b33600160a060020a031684600160a060020a03167f09cd8dcaf170a50a26316b5fe0727dd9fb9581a688d65e758b16a1650da65c0b858460000154866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614ee2578181015183820152602001614eca565b50505050905090810190601f168015614f0f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505600546f6b656e207472616e73666572206661696c65640000000000000000000000a165627a7a7230582086e0cb9f2a30c9c6d347cd1c32771efa329aa4a981190f83e37323d2cf8ac00d0029`

// DeployCivilTCRContract deploys a new Ethereum contract, binding an instance of CivilTCRContract to it.
func DeployCivilTCRContract(auth *bind.TransactOpts, backend bind.ContractBackend, token common.Address, plcr common.Address, param common.Address, govt common.Address) (common.Address, *types.Transaction, *CivilTCRContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CivilTCRContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CivilTCRContractBin), backend, token, plcr, param, govt)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CivilTCRContract{CivilTCRContractCaller: CivilTCRContractCaller{contract: contract}, CivilTCRContractTransactor: CivilTCRContractTransactor{contract: contract}, CivilTCRContractFilterer: CivilTCRContractFilterer{contract: contract}}, nil
}

// CivilTCRContract is an auto generated Go binding around an Ethereum contract.
type CivilTCRContract struct {
	CivilTCRContractCaller     // Read-only binding to the contract
	CivilTCRContractTransactor // Write-only binding to the contract
	CivilTCRContractFilterer   // Log filterer for contract events
}

// CivilTCRContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type CivilTCRContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CivilTCRContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CivilTCRContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CivilTCRContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CivilTCRContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CivilTCRContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CivilTCRContractSession struct {
	Contract     *CivilTCRContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CivilTCRContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CivilTCRContractCallerSession struct {
	Contract *CivilTCRContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CivilTCRContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CivilTCRContractTransactorSession struct {
	Contract     *CivilTCRContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CivilTCRContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type CivilTCRContractRaw struct {
	Contract *CivilTCRContract // Generic contract binding to access the raw methods on
}

// CivilTCRContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CivilTCRContractCallerRaw struct {
	Contract *CivilTCRContractCaller // Generic read-only contract binding to access the raw methods on
}

// CivilTCRContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CivilTCRContractTransactorRaw struct {
	Contract *CivilTCRContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCivilTCRContract creates a new instance of CivilTCRContract, bound to a specific deployed contract.
func NewCivilTCRContract(address common.Address, backend bind.ContractBackend) (*CivilTCRContract, error) {
	contract, err := bindCivilTCRContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContract{CivilTCRContractCaller: CivilTCRContractCaller{contract: contract}, CivilTCRContractTransactor: CivilTCRContractTransactor{contract: contract}, CivilTCRContractFilterer: CivilTCRContractFilterer{contract: contract}}, nil
}

// NewCivilTCRContractCaller creates a new read-only instance of CivilTCRContract, bound to a specific deployed contract.
func NewCivilTCRContractCaller(address common.Address, caller bind.ContractCaller) (*CivilTCRContractCaller, error) {
	contract, err := bindCivilTCRContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractCaller{contract: contract}, nil
}

// NewCivilTCRContractTransactor creates a new write-only instance of CivilTCRContract, bound to a specific deployed contract.
func NewCivilTCRContractTransactor(address common.Address, transactor bind.ContractTransactor) (*CivilTCRContractTransactor, error) {
	contract, err := bindCivilTCRContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractTransactor{contract: contract}, nil
}

// NewCivilTCRContractFilterer creates a new log filterer instance of CivilTCRContract, bound to a specific deployed contract.
func NewCivilTCRContractFilterer(address common.Address, filterer bind.ContractFilterer) (*CivilTCRContractFilterer, error) {
	contract, err := bindCivilTCRContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractFilterer{contract: contract}, nil
}

// bindCivilTCRContract binds a generic wrapper to an already deployed contract.
func bindCivilTCRContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CivilTCRContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CivilTCRContract *CivilTCRContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CivilTCRContract.Contract.CivilTCRContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CivilTCRContract *CivilTCRContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.CivilTCRContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CivilTCRContract *CivilTCRContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.CivilTCRContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CivilTCRContract *CivilTCRContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CivilTCRContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CivilTCRContract *CivilTCRContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CivilTCRContract *CivilTCRContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.contract.Transact(opts, method, params...)
}

// AppWasMade is a free data retrieval call binding the contract method 0x61a9a8ca.
//
// Solidity: function appWasMade(listingAddress address) constant returns(exists bool)
func (_CivilTCRContract *CivilTCRContractCaller) AppWasMade(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "appWasMade", listingAddress)
	return *ret0, err
}

// AppWasMade is a free data retrieval call binding the contract method 0x61a9a8ca.
//
// Solidity: function appWasMade(listingAddress address) constant returns(exists bool)
func (_CivilTCRContract *CivilTCRContractSession) AppWasMade(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.AppWasMade(&_CivilTCRContract.CallOpts, listingAddress)
}

// AppWasMade is a free data retrieval call binding the contract method 0x61a9a8ca.
//
// Solidity: function appWasMade(listingAddress address) constant returns(exists bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) AppWasMade(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.AppWasMade(&_CivilTCRContract.CallOpts, listingAddress)
}

// AppealCanBeResolved is a free data retrieval call binding the contract method 0x25ecef04.
//
// Solidity: function appealCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractCaller) AppealCanBeResolved(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "appealCanBeResolved", listingAddress)
	return *ret0, err
}

// AppealCanBeResolved is a free data retrieval call binding the contract method 0x25ecef04.
//
// Solidity: function appealCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractSession) AppealCanBeResolved(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.AppealCanBeResolved(&_CivilTCRContract.CallOpts, listingAddress)
}

// AppealCanBeResolved is a free data retrieval call binding the contract method 0x25ecef04.
//
// Solidity: function appealCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) AppealCanBeResolved(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.AppealCanBeResolved(&_CivilTCRContract.CallOpts, listingAddress)
}

// AppealChallengeCanBeResolved is a free data retrieval call binding the contract method 0x0aac4543.
//
// Solidity: function appealChallengeCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractCaller) AppealChallengeCanBeResolved(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "appealChallengeCanBeResolved", listingAddress)
	return *ret0, err
}

// AppealChallengeCanBeResolved is a free data retrieval call binding the contract method 0x0aac4543.
//
// Solidity: function appealChallengeCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractSession) AppealChallengeCanBeResolved(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.AppealChallengeCanBeResolved(&_CivilTCRContract.CallOpts, listingAddress)
}

// AppealChallengeCanBeResolved is a free data retrieval call binding the contract method 0x0aac4543.
//
// Solidity: function appealChallengeCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) AppealChallengeCanBeResolved(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.AppealChallengeCanBeResolved(&_CivilTCRContract.CallOpts, listingAddress)
}

// Appeals is a free data retrieval call binding the contract method 0xacff8687.
//
// Solidity: function appeals( uint256) constant returns(requester address, appealFeePaid uint256, appealPhaseExpiry uint256, appealGranted bool, appealOpenToChallengeExpiry uint256, appealChallengeID uint256, overturned bool)
func (_CivilTCRContract *CivilTCRContractCaller) Appeals(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Requester                   common.Address
	AppealFeePaid               *big.Int
	AppealPhaseExpiry           *big.Int
	AppealGranted               bool
	AppealOpenToChallengeExpiry *big.Int
	AppealChallengeID           *big.Int
	Overturned                  bool
}, error) {
	ret := new(struct {
		Requester                   common.Address
		AppealFeePaid               *big.Int
		AppealPhaseExpiry           *big.Int
		AppealGranted               bool
		AppealOpenToChallengeExpiry *big.Int
		AppealChallengeID           *big.Int
		Overturned                  bool
	})
	out := ret
	err := _CivilTCRContract.contract.Call(opts, out, "appeals", arg0)
	return *ret, err
}

// Appeals is a free data retrieval call binding the contract method 0xacff8687.
//
// Solidity: function appeals( uint256) constant returns(requester address, appealFeePaid uint256, appealPhaseExpiry uint256, appealGranted bool, appealOpenToChallengeExpiry uint256, appealChallengeID uint256, overturned bool)
func (_CivilTCRContract *CivilTCRContractSession) Appeals(arg0 *big.Int) (struct {
	Requester                   common.Address
	AppealFeePaid               *big.Int
	AppealPhaseExpiry           *big.Int
	AppealGranted               bool
	AppealOpenToChallengeExpiry *big.Int
	AppealChallengeID           *big.Int
	Overturned                  bool
}, error) {
	return _CivilTCRContract.Contract.Appeals(&_CivilTCRContract.CallOpts, arg0)
}

// Appeals is a free data retrieval call binding the contract method 0xacff8687.
//
// Solidity: function appeals( uint256) constant returns(requester address, appealFeePaid uint256, appealPhaseExpiry uint256, appealGranted bool, appealOpenToChallengeExpiry uint256, appealChallengeID uint256, overturned bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) Appeals(arg0 *big.Int) (struct {
	Requester                   common.Address
	AppealFeePaid               *big.Int
	AppealPhaseExpiry           *big.Int
	AppealGranted               bool
	AppealOpenToChallengeExpiry *big.Int
	AppealChallengeID           *big.Int
	Overturned                  bool
}, error) {
	return _CivilTCRContract.Contract.Appeals(&_CivilTCRContract.CallOpts, arg0)
}

// CanBeWhitelisted is a free data retrieval call binding the contract method 0xdd4e7cfd.
//
// Solidity: function canBeWhitelisted(listingAddress address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractCaller) CanBeWhitelisted(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "canBeWhitelisted", listingAddress)
	return *ret0, err
}

// CanBeWhitelisted is a free data retrieval call binding the contract method 0xdd4e7cfd.
//
// Solidity: function canBeWhitelisted(listingAddress address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractSession) CanBeWhitelisted(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.CanBeWhitelisted(&_CivilTCRContract.CallOpts, listingAddress)
}

// CanBeWhitelisted is a free data retrieval call binding the contract method 0xdd4e7cfd.
//
// Solidity: function canBeWhitelisted(listingAddress address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) CanBeWhitelisted(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.CanBeWhitelisted(&_CivilTCRContract.CallOpts, listingAddress)
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x2ea9b696.
//
// Solidity: function challengeCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractCaller) ChallengeCanBeResolved(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "challengeCanBeResolved", listingAddress)
	return *ret0, err
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x2ea9b696.
//
// Solidity: function challengeCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractSession) ChallengeCanBeResolved(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.ChallengeCanBeResolved(&_CivilTCRContract.CallOpts, listingAddress)
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x2ea9b696.
//
// Solidity: function challengeCanBeResolved(listingAddress address) constant returns(canBeResolved bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) ChallengeCanBeResolved(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.ChallengeCanBeResolved(&_CivilTCRContract.CallOpts, listingAddress)
}

// ChallengeExists is a free data retrieval call binding the contract method 0x6eefcab9.
//
// Solidity: function challengeExists(listingAddress address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractCaller) ChallengeExists(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "challengeExists", listingAddress)
	return *ret0, err
}

// ChallengeExists is a free data retrieval call binding the contract method 0x6eefcab9.
//
// Solidity: function challengeExists(listingAddress address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractSession) ChallengeExists(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.ChallengeExists(&_CivilTCRContract.CallOpts, listingAddress)
}

// ChallengeExists is a free data retrieval call binding the contract method 0x6eefcab9.
//
// Solidity: function challengeExists(listingAddress address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) ChallengeExists(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.ChallengeExists(&_CivilTCRContract.CallOpts, listingAddress)
}

// ChallengeRequestAppealExpiries is a free data retrieval call binding the contract method 0x64c37318.
//
// Solidity: function challengeRequestAppealExpiries( uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractCaller) ChallengeRequestAppealExpiries(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "challengeRequestAppealExpiries", arg0)
	return *ret0, err
}

// ChallengeRequestAppealExpiries is a free data retrieval call binding the contract method 0x64c37318.
//
// Solidity: function challengeRequestAppealExpiries( uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractSession) ChallengeRequestAppealExpiries(arg0 *big.Int) (*big.Int, error) {
	return _CivilTCRContract.Contract.ChallengeRequestAppealExpiries(&_CivilTCRContract.CallOpts, arg0)
}

// ChallengeRequestAppealExpiries is a free data retrieval call binding the contract method 0x64c37318.
//
// Solidity: function challengeRequestAppealExpiries( uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractCallerSession) ChallengeRequestAppealExpiries(arg0 *big.Int) (*big.Int, error) {
	return _CivilTCRContract.Contract.ChallengeRequestAppealExpiries(&_CivilTCRContract.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	RewardPool  *big.Int
	Challenger  common.Address
	Resolved    bool
	Stake       *big.Int
	TotalTokens *big.Int
}, error) {
	ret := new(struct {
		RewardPool  *big.Int
		Challenger  common.Address
		Resolved    bool
		Stake       *big.Int
		TotalTokens *big.Int
	})
	out := ret
	err := _CivilTCRContract.contract.Call(opts, out, "challenges", arg0)
	return *ret, err
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractSession) Challenges(arg0 *big.Int) (struct {
	RewardPool  *big.Int
	Challenger  common.Address
	Resolved    bool
	Stake       *big.Int
	TotalTokens *big.Int
}, error) {
	return _CivilTCRContract.Contract.Challenges(&_CivilTCRContract.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractCallerSession) Challenges(arg0 *big.Int) (struct {
	RewardPool  *big.Int
	Challenger  common.Address
	Resolved    bool
	Stake       *big.Int
	TotalTokens *big.Int
}, error) {
	return _CivilTCRContract.Contract.Challenges(&_CivilTCRContract.CallOpts, arg0)
}

// CivilVoting is a free data retrieval call binding the contract method 0x1e39d8d7.
//
// Solidity: function civilVoting() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCaller) CivilVoting(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "civilVoting")
	return *ret0, err
}

// CivilVoting is a free data retrieval call binding the contract method 0x1e39d8d7.
//
// Solidity: function civilVoting() constant returns(address)
func (_CivilTCRContract *CivilTCRContractSession) CivilVoting() (common.Address, error) {
	return _CivilTCRContract.Contract.CivilVoting(&_CivilTCRContract.CallOpts)
}

// CivilVoting is a free data retrieval call binding the contract method 0x1e39d8d7.
//
// Solidity: function civilVoting() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCallerSession) CivilVoting() (common.Address, error) {
	return _CivilTCRContract.Contract.CivilVoting(&_CivilTCRContract.CallOpts)
}

// DetermineReward is a free data retrieval call binding the contract method 0xc8187cf1.
//
// Solidity: function determineReward(challengeID uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractCaller) DetermineReward(opts *bind.CallOpts, challengeID *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "determineReward", challengeID)
	return *ret0, err
}

// DetermineReward is a free data retrieval call binding the contract method 0xc8187cf1.
//
// Solidity: function determineReward(challengeID uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractSession) DetermineReward(challengeID *big.Int) (*big.Int, error) {
	return _CivilTCRContract.Contract.DetermineReward(&_CivilTCRContract.CallOpts, challengeID)
}

// DetermineReward is a free data retrieval call binding the contract method 0xc8187cf1.
//
// Solidity: function determineReward(challengeID uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractCallerSession) DetermineReward(challengeID *big.Int) (*big.Int, error) {
	return _CivilTCRContract.Contract.DetermineReward(&_CivilTCRContract.CallOpts, challengeID)
}

// Government is a free data retrieval call binding the contract method 0x2672f526.
//
// Solidity: function government() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCaller) Government(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "government")
	return *ret0, err
}

// Government is a free data retrieval call binding the contract method 0x2672f526.
//
// Solidity: function government() constant returns(address)
func (_CivilTCRContract *CivilTCRContractSession) Government() (common.Address, error) {
	return _CivilTCRContract.Contract.Government(&_CivilTCRContract.CallOpts)
}

// Government is a free data retrieval call binding the contract method 0x2672f526.
//
// Solidity: function government() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCallerSession) Government() (common.Address, error) {
	return _CivilTCRContract.Contract.Government(&_CivilTCRContract.CallOpts)
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted(listingAddress address) constant returns(whitelisted bool)
func (_CivilTCRContract *CivilTCRContractCaller) IsWhitelisted(opts *bind.CallOpts, listingAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "isWhitelisted", listingAddress)
	return *ret0, err
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted(listingAddress address) constant returns(whitelisted bool)
func (_CivilTCRContract *CivilTCRContractSession) IsWhitelisted(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.IsWhitelisted(&_CivilTCRContract.CallOpts, listingAddress)
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted(listingAddress address) constant returns(whitelisted bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) IsWhitelisted(listingAddress common.Address) (bool, error) {
	return _CivilTCRContract.Contract.IsWhitelisted(&_CivilTCRContract.CallOpts, listingAddress)
}

// Listings is a free data retrieval call binding the contract method 0x65d96c82.
//
// Solidity: function listings( address) constant returns(applicationExpiry uint256, whitelisted bool, owner address, unstakedDeposit uint256, challengeID uint256)
func (_CivilTCRContract *CivilTCRContractCaller) Listings(opts *bind.CallOpts, arg0 common.Address) (struct {
	ApplicationExpiry *big.Int
	Whitelisted       bool
	Owner             common.Address
	UnstakedDeposit   *big.Int
	ChallengeID       *big.Int
}, error) {
	ret := new(struct {
		ApplicationExpiry *big.Int
		Whitelisted       bool
		Owner             common.Address
		UnstakedDeposit   *big.Int
		ChallengeID       *big.Int
	})
	out := ret
	err := _CivilTCRContract.contract.Call(opts, out, "listings", arg0)
	return *ret, err
}

// Listings is a free data retrieval call binding the contract method 0x65d96c82.
//
// Solidity: function listings( address) constant returns(applicationExpiry uint256, whitelisted bool, owner address, unstakedDeposit uint256, challengeID uint256)
func (_CivilTCRContract *CivilTCRContractSession) Listings(arg0 common.Address) (struct {
	ApplicationExpiry *big.Int
	Whitelisted       bool
	Owner             common.Address
	UnstakedDeposit   *big.Int
	ChallengeID       *big.Int
}, error) {
	return _CivilTCRContract.Contract.Listings(&_CivilTCRContract.CallOpts, arg0)
}

// Listings is a free data retrieval call binding the contract method 0x65d96c82.
//
// Solidity: function listings( address) constant returns(applicationExpiry uint256, whitelisted bool, owner address, unstakedDeposit uint256, challengeID uint256)
func (_CivilTCRContract *CivilTCRContractCallerSession) Listings(arg0 common.Address) (struct {
	ApplicationExpiry *big.Int
	Whitelisted       bool
	Owner             common.Address
	UnstakedDeposit   *big.Int
	ChallengeID       *big.Int
}, error) {
	return _CivilTCRContract.Contract.Listings(&_CivilTCRContract.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_CivilTCRContract *CivilTCRContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_CivilTCRContract *CivilTCRContractSession) Name() (string, error) {
	return _CivilTCRContract.Contract.Name(&_CivilTCRContract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_CivilTCRContract *CivilTCRContractCallerSession) Name() (string, error) {
	return _CivilTCRContract.Contract.Name(&_CivilTCRContract.CallOpts)
}

// Parameterizer is a free data retrieval call binding the contract method 0xe1e3f915.
//
// Solidity: function parameterizer() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCaller) Parameterizer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "parameterizer")
	return *ret0, err
}

// Parameterizer is a free data retrieval call binding the contract method 0xe1e3f915.
//
// Solidity: function parameterizer() constant returns(address)
func (_CivilTCRContract *CivilTCRContractSession) Parameterizer() (common.Address, error) {
	return _CivilTCRContract.Contract.Parameterizer(&_CivilTCRContract.CallOpts)
}

// Parameterizer is a free data retrieval call binding the contract method 0xe1e3f915.
//
// Solidity: function parameterizer() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCallerSession) Parameterizer() (common.Address, error) {
	return _CivilTCRContract.Contract.Parameterizer(&_CivilTCRContract.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_CivilTCRContract *CivilTCRContractSession) Token() (common.Address, error) {
	return _CivilTCRContract.Contract.Token(&_CivilTCRContract.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCallerSession) Token() (common.Address, error) {
	return _CivilTCRContract.Contract.Token(&_CivilTCRContract.CallOpts)
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractCaller) TokenClaims(opts *bind.CallOpts, _challengeID *big.Int, _voter common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "tokenClaims", _challengeID, _voter)
	return *ret0, err
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractSession) TokenClaims(_challengeID *big.Int, _voter common.Address) (bool, error) {
	return _CivilTCRContract.Contract.TokenClaims(&_CivilTCRContract.CallOpts, _challengeID, _voter)
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_CivilTCRContract *CivilTCRContractCallerSession) TokenClaims(_challengeID *big.Int, _voter common.Address) (bool, error) {
	return _CivilTCRContract.Contract.TokenClaims(&_CivilTCRContract.CallOpts, _challengeID, _voter)
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(voter address, challengeID uint256, salt uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractCaller) VoterReward(opts *bind.CallOpts, voter common.Address, challengeID *big.Int, salt *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "voterReward", voter, challengeID, salt)
	return *ret0, err
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(voter address, challengeID uint256, salt uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractSession) VoterReward(voter common.Address, challengeID *big.Int, salt *big.Int) (*big.Int, error) {
	return _CivilTCRContract.Contract.VoterReward(&_CivilTCRContract.CallOpts, voter, challengeID, salt)
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(voter address, challengeID uint256, salt uint256) constant returns(uint256)
func (_CivilTCRContract *CivilTCRContractCallerSession) VoterReward(voter common.Address, challengeID *big.Int, salt *big.Int) (*big.Int, error) {
	return _CivilTCRContract.Contract.VoterReward(&_CivilTCRContract.CallOpts, voter, challengeID, salt)
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCaller) Voting(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CivilTCRContract.contract.Call(opts, out, "voting")
	return *ret0, err
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_CivilTCRContract *CivilTCRContractSession) Voting() (common.Address, error) {
	return _CivilTCRContract.Contract.Voting(&_CivilTCRContract.CallOpts)
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_CivilTCRContract *CivilTCRContractCallerSession) Voting() (common.Address, error) {
	return _CivilTCRContract.Contract.Voting(&_CivilTCRContract.CallOpts)
}

// Apply is a paid mutator transaction binding the contract method 0x55246b9c.
//
// Solidity: function apply(listingAddress address, amount uint256, data string) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) Apply(opts *bind.TransactOpts, listingAddress common.Address, amount *big.Int, data string) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "apply", listingAddress, amount, data)
}

// Apply is a paid mutator transaction binding the contract method 0x55246b9c.
//
// Solidity: function apply(listingAddress address, amount uint256, data string) returns()
func (_CivilTCRContract *CivilTCRContractSession) Apply(listingAddress common.Address, amount *big.Int, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Apply(&_CivilTCRContract.TransactOpts, listingAddress, amount, data)
}

// Apply is a paid mutator transaction binding the contract method 0x55246b9c.
//
// Solidity: function apply(listingAddress address, amount uint256, data string) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) Apply(listingAddress common.Address, amount *big.Int, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Apply(&_CivilTCRContract.TransactOpts, listingAddress, amount, data)
}

// Challenge is a paid mutator transaction binding the contract method 0xbc4b010f.
//
// Solidity: function challenge(listingAddress address, data string) returns(challengeID uint256)
func (_CivilTCRContract *CivilTCRContractTransactor) Challenge(opts *bind.TransactOpts, listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "challenge", listingAddress, data)
}

// Challenge is a paid mutator transaction binding the contract method 0xbc4b010f.
//
// Solidity: function challenge(listingAddress address, data string) returns(challengeID uint256)
func (_CivilTCRContract *CivilTCRContractSession) Challenge(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Challenge(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// Challenge is a paid mutator transaction binding the contract method 0xbc4b010f.
//
// Solidity: function challenge(listingAddress address, data string) returns(challengeID uint256)
func (_CivilTCRContract *CivilTCRContractTransactorSession) Challenge(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Challenge(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// ChallengeGrantedAppeal is a paid mutator transaction binding the contract method 0x120c40c6.
//
// Solidity: function challengeGrantedAppeal(listingAddress address, data string) returns(challengeID uint256)
func (_CivilTCRContract *CivilTCRContractTransactor) ChallengeGrantedAppeal(opts *bind.TransactOpts, listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "challengeGrantedAppeal", listingAddress, data)
}

// ChallengeGrantedAppeal is a paid mutator transaction binding the contract method 0x120c40c6.
//
// Solidity: function challengeGrantedAppeal(listingAddress address, data string) returns(challengeID uint256)
func (_CivilTCRContract *CivilTCRContractSession) ChallengeGrantedAppeal(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.ChallengeGrantedAppeal(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// ChallengeGrantedAppeal is a paid mutator transaction binding the contract method 0x120c40c6.
//
// Solidity: function challengeGrantedAppeal(listingAddress address, data string) returns(challengeID uint256)
func (_CivilTCRContract *CivilTCRContractTransactorSession) ChallengeGrantedAppeal(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.ChallengeGrantedAppeal(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) ClaimReward(opts *bind.TransactOpts, _challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "claimReward", _challengeID, _salt)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_CivilTCRContract *CivilTCRContractSession) ClaimReward(_challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.ClaimReward(&_CivilTCRContract.TransactOpts, _challengeID, _salt)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) ClaimReward(_challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.ClaimReward(&_CivilTCRContract.TransactOpts, _challengeID, _salt)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x5f02116f.
//
// Solidity: function claimRewards(_challengeIDs uint256[], _salts uint256[]) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) ClaimRewards(opts *bind.TransactOpts, _challengeIDs []*big.Int, _salts []*big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "claimRewards", _challengeIDs, _salts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x5f02116f.
//
// Solidity: function claimRewards(_challengeIDs uint256[], _salts uint256[]) returns()
func (_CivilTCRContract *CivilTCRContractSession) ClaimRewards(_challengeIDs []*big.Int, _salts []*big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.ClaimRewards(&_CivilTCRContract.TransactOpts, _challengeIDs, _salts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x5f02116f.
//
// Solidity: function claimRewards(_challengeIDs uint256[], _salts uint256[]) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) ClaimRewards(_challengeIDs []*big.Int, _salts []*big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.ClaimRewards(&_CivilTCRContract.TransactOpts, _challengeIDs, _salts)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(listingAddress address, _amount uint256) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) Deposit(opts *bind.TransactOpts, listingAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "deposit", listingAddress, _amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(listingAddress address, _amount uint256) returns()
func (_CivilTCRContract *CivilTCRContractSession) Deposit(listingAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Deposit(&_CivilTCRContract.TransactOpts, listingAddress, _amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(listingAddress address, _amount uint256) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) Deposit(listingAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Deposit(&_CivilTCRContract.TransactOpts, listingAddress, _amount)
}

// Exit is a paid mutator transaction binding the contract method 0xb42652e9.
//
// Solidity: function exit(listingAddress address) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) Exit(opts *bind.TransactOpts, listingAddress common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "exit", listingAddress)
}

// Exit is a paid mutator transaction binding the contract method 0xb42652e9.
//
// Solidity: function exit(listingAddress address) returns()
func (_CivilTCRContract *CivilTCRContractSession) Exit(listingAddress common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Exit(&_CivilTCRContract.TransactOpts, listingAddress)
}

// Exit is a paid mutator transaction binding the contract method 0xb42652e9.
//
// Solidity: function exit(listingAddress address) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) Exit(listingAddress common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Exit(&_CivilTCRContract.TransactOpts, listingAddress)
}

// GrantAppeal is a paid mutator transaction binding the contract method 0xc931674b.
//
// Solidity: function grantAppeal(listingAddress address, data string) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) GrantAppeal(opts *bind.TransactOpts, listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "grantAppeal", listingAddress, data)
}

// GrantAppeal is a paid mutator transaction binding the contract method 0xc931674b.
//
// Solidity: function grantAppeal(listingAddress address, data string) returns()
func (_CivilTCRContract *CivilTCRContractSession) GrantAppeal(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.GrantAppeal(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// GrantAppeal is a paid mutator transaction binding the contract method 0xc931674b.
//
// Solidity: function grantAppeal(listingAddress address, data string) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) GrantAppeal(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.GrantAppeal(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// RequestAppeal is a paid mutator transaction binding the contract method 0xf4c8cfc5.
//
// Solidity: function requestAppeal(listingAddress address, data string) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) RequestAppeal(opts *bind.TransactOpts, listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "requestAppeal", listingAddress, data)
}

// RequestAppeal is a paid mutator transaction binding the contract method 0xf4c8cfc5.
//
// Solidity: function requestAppeal(listingAddress address, data string) returns()
func (_CivilTCRContract *CivilTCRContractSession) RequestAppeal(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.RequestAppeal(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// RequestAppeal is a paid mutator transaction binding the contract method 0xf4c8cfc5.
//
// Solidity: function requestAppeal(listingAddress address, data string) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) RequestAppeal(listingAddress common.Address, data string) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.RequestAppeal(&_CivilTCRContract.TransactOpts, listingAddress, data)
}

// TransferGovernment is a paid mutator transaction binding the contract method 0x5b5d4e73.
//
// Solidity: function transferGovernment(newGovernment address) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) TransferGovernment(opts *bind.TransactOpts, newGovernment common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "transferGovernment", newGovernment)
}

// TransferGovernment is a paid mutator transaction binding the contract method 0x5b5d4e73.
//
// Solidity: function transferGovernment(newGovernment address) returns()
func (_CivilTCRContract *CivilTCRContractSession) TransferGovernment(newGovernment common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.TransferGovernment(&_CivilTCRContract.TransactOpts, newGovernment)
}

// TransferGovernment is a paid mutator transaction binding the contract method 0x5b5d4e73.
//
// Solidity: function transferGovernment(newGovernment address) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) TransferGovernment(newGovernment common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.TransferGovernment(&_CivilTCRContract.TransactOpts, newGovernment)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x01162b93.
//
// Solidity: function updateStatus(listingAddress address) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) UpdateStatus(opts *bind.TransactOpts, listingAddress common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "updateStatus", listingAddress)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x01162b93.
//
// Solidity: function updateStatus(listingAddress address) returns()
func (_CivilTCRContract *CivilTCRContractSession) UpdateStatus(listingAddress common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.UpdateStatus(&_CivilTCRContract.TransactOpts, listingAddress)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x01162b93.
//
// Solidity: function updateStatus(listingAddress address) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) UpdateStatus(listingAddress common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.UpdateStatus(&_CivilTCRContract.TransactOpts, listingAddress)
}

// UpdateStatuses is a paid mutator transaction binding the contract method 0xf96c8720.
//
// Solidity: function updateStatuses(listingAddresses address[]) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) UpdateStatuses(opts *bind.TransactOpts, listingAddresses []common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "updateStatuses", listingAddresses)
}

// UpdateStatuses is a paid mutator transaction binding the contract method 0xf96c8720.
//
// Solidity: function updateStatuses(listingAddresses address[]) returns()
func (_CivilTCRContract *CivilTCRContractSession) UpdateStatuses(listingAddresses []common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.UpdateStatuses(&_CivilTCRContract.TransactOpts, listingAddresses)
}

// UpdateStatuses is a paid mutator transaction binding the contract method 0xf96c8720.
//
// Solidity: function updateStatuses(listingAddresses address[]) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) UpdateStatuses(listingAddresses []common.Address) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.UpdateStatuses(&_CivilTCRContract.TransactOpts, listingAddresses)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(listingAddress address, _amount uint256) returns()
func (_CivilTCRContract *CivilTCRContractTransactor) Withdraw(opts *bind.TransactOpts, listingAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.contract.Transact(opts, "withdraw", listingAddress, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(listingAddress address, _amount uint256) returns()
func (_CivilTCRContract *CivilTCRContractSession) Withdraw(listingAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Withdraw(&_CivilTCRContract.TransactOpts, listingAddress, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(listingAddress address, _amount uint256) returns()
func (_CivilTCRContract *CivilTCRContractTransactorSession) Withdraw(listingAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CivilTCRContract.Contract.Withdraw(&_CivilTCRContract.TransactOpts, listingAddress, _amount)
}

// CivilTCRContractAppealGrantedIterator is returned from FilterAppealGranted and is used to iterate over the raw logs and unpacked data for AppealGranted events raised by the CivilTCRContract contract.
type CivilTCRContractAppealGrantedIterator struct {
	Event *CivilTCRContractAppealGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractAppealGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractAppealGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractAppealGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractAppealGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractAppealGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractAppealGranted represents a AppealGranted event raised by the CivilTCRContract contract.
type CivilTCRContractAppealGranted struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	Data           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAppealGranted is a free log retrieval operation binding the contract event 0x85f61fe0f1b618d4efbf918ec1be0591560df9463fe15cbfb435c3537a1fc102.
//
// Solidity: e _AppealGranted(listingAddress indexed address, challengeID indexed uint256, data string)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterAppealGranted(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int) (*CivilTCRContractAppealGrantedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_AppealGranted", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractAppealGrantedIterator{contract: _CivilTCRContract.contract, event: "_AppealGranted", logs: logs, sub: sub}, nil
}

// WatchAppealGranted is a free log subscription operation binding the contract event 0x85f61fe0f1b618d4efbf918ec1be0591560df9463fe15cbfb435c3537a1fc102.
//
// Solidity: e _AppealGranted(listingAddress indexed address, challengeID indexed uint256, data string)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchAppealGranted(opts *bind.WatchOpts, sink chan<- *CivilTCRContractAppealGranted, listingAddress []common.Address, challengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_AppealGranted", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractAppealGranted)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_AppealGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractAppealRequestedIterator is returned from FilterAppealRequested and is used to iterate over the raw logs and unpacked data for AppealRequested events raised by the CivilTCRContract contract.
type CivilTCRContractAppealRequestedIterator struct {
	Event *CivilTCRContractAppealRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractAppealRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractAppealRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractAppealRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractAppealRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractAppealRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractAppealRequested represents a AppealRequested event raised by the CivilTCRContract contract.
type CivilTCRContractAppealRequested struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	AppealFeePaid  *big.Int
	Requester      common.Address
	Data           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAppealRequested is a free log retrieval operation binding the contract event 0xdb6f1c08edff9a1f7e425164118b0473e04404404b2c2d38d6e96e41fcbc7fb1.
//
// Solidity: e _AppealRequested(listingAddress indexed address, challengeID indexed uint256, appealFeePaid uint256, requester address, data string)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterAppealRequested(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int) (*CivilTCRContractAppealRequestedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_AppealRequested", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractAppealRequestedIterator{contract: _CivilTCRContract.contract, event: "_AppealRequested", logs: logs, sub: sub}, nil
}

// WatchAppealRequested is a free log subscription operation binding the contract event 0xdb6f1c08edff9a1f7e425164118b0473e04404404b2c2d38d6e96e41fcbc7fb1.
//
// Solidity: e _AppealRequested(listingAddress indexed address, challengeID indexed uint256, appealFeePaid uint256, requester address, data string)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchAppealRequested(opts *bind.WatchOpts, sink chan<- *CivilTCRContractAppealRequested, listingAddress []common.Address, challengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_AppealRequested", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractAppealRequested)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_AppealRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractApplicationIterator is returned from FilterApplication and is used to iterate over the raw logs and unpacked data for Application events raised by the CivilTCRContract contract.
type CivilTCRContractApplicationIterator struct {
	Event *CivilTCRContractApplication // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractApplicationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractApplication)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractApplication)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractApplicationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractApplicationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractApplication represents a Application event raised by the CivilTCRContract contract.
type CivilTCRContractApplication struct {
	ListingAddress common.Address
	Deposit        *big.Int
	AppEndDate     *big.Int
	Data           string
	Applicant      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApplication is a free log retrieval operation binding the contract event 0x09cd8dcaf170a50a26316b5fe0727dd9fb9581a688d65e758b16a1650da65c0b.
//
// Solidity: e _Application(listingAddress indexed address, deposit uint256, appEndDate uint256, data string, applicant indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterApplication(opts *bind.FilterOpts, listingAddress []common.Address, applicant []common.Address) (*CivilTCRContractApplicationIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	var applicantRule []interface{}
	for _, applicantItem := range applicant {
		applicantRule = append(applicantRule, applicantItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_Application", listingAddressRule, applicantRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractApplicationIterator{contract: _CivilTCRContract.contract, event: "_Application", logs: logs, sub: sub}, nil
}

// WatchApplication is a free log subscription operation binding the contract event 0x09cd8dcaf170a50a26316b5fe0727dd9fb9581a688d65e758b16a1650da65c0b.
//
// Solidity: e _Application(listingAddress indexed address, deposit uint256, appEndDate uint256, data string, applicant indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchApplication(opts *bind.WatchOpts, sink chan<- *CivilTCRContractApplication, listingAddress []common.Address, applicant []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	var applicantRule []interface{}
	for _, applicantItem := range applicant {
		applicantRule = append(applicantRule, applicantItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_Application", listingAddressRule, applicantRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractApplication)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_Application", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractApplicationRemovedIterator is returned from FilterApplicationRemoved and is used to iterate over the raw logs and unpacked data for ApplicationRemoved events raised by the CivilTCRContract contract.
type CivilTCRContractApplicationRemovedIterator struct {
	Event *CivilTCRContractApplicationRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractApplicationRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractApplicationRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractApplicationRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractApplicationRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractApplicationRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractApplicationRemoved represents a ApplicationRemoved event raised by the CivilTCRContract contract.
type CivilTCRContractApplicationRemoved struct {
	ListingAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApplicationRemoved is a free log retrieval operation binding the contract event 0x8ad9ca8735c55207756208e8f59c7693e83d234fc6c8af2713f266468edff871.
//
// Solidity: e _ApplicationRemoved(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterApplicationRemoved(opts *bind.FilterOpts, listingAddress []common.Address) (*CivilTCRContractApplicationRemovedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_ApplicationRemoved", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractApplicationRemovedIterator{contract: _CivilTCRContract.contract, event: "_ApplicationRemoved", logs: logs, sub: sub}, nil
}

// WatchApplicationRemoved is a free log subscription operation binding the contract event 0x8ad9ca8735c55207756208e8f59c7693e83d234fc6c8af2713f266468edff871.
//
// Solidity: e _ApplicationRemoved(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchApplicationRemoved(opts *bind.WatchOpts, sink chan<- *CivilTCRContractApplicationRemoved, listingAddress []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_ApplicationRemoved", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractApplicationRemoved)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_ApplicationRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractApplicationWhitelistedIterator is returned from FilterApplicationWhitelisted and is used to iterate over the raw logs and unpacked data for ApplicationWhitelisted events raised by the CivilTCRContract contract.
type CivilTCRContractApplicationWhitelistedIterator struct {
	Event *CivilTCRContractApplicationWhitelisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractApplicationWhitelistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractApplicationWhitelisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractApplicationWhitelisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractApplicationWhitelistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractApplicationWhitelistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractApplicationWhitelisted represents a ApplicationWhitelisted event raised by the CivilTCRContract contract.
type CivilTCRContractApplicationWhitelisted struct {
	ListingAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApplicationWhitelisted is a free log retrieval operation binding the contract event 0xb268dc7f76f496fd307b40e0a3b57631a7e46123d9f708b1573bd4efbba3bdba.
//
// Solidity: e _ApplicationWhitelisted(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterApplicationWhitelisted(opts *bind.FilterOpts, listingAddress []common.Address) (*CivilTCRContractApplicationWhitelistedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_ApplicationWhitelisted", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractApplicationWhitelistedIterator{contract: _CivilTCRContract.contract, event: "_ApplicationWhitelisted", logs: logs, sub: sub}, nil
}

// WatchApplicationWhitelisted is a free log subscription operation binding the contract event 0xb268dc7f76f496fd307b40e0a3b57631a7e46123d9f708b1573bd4efbba3bdba.
//
// Solidity: e _ApplicationWhitelisted(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchApplicationWhitelisted(opts *bind.WatchOpts, sink chan<- *CivilTCRContractApplicationWhitelisted, listingAddress []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_ApplicationWhitelisted", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractApplicationWhitelisted)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_ApplicationWhitelisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractChallengeIterator is returned from FilterChallenge and is used to iterate over the raw logs and unpacked data for Challenge events raised by the CivilTCRContract contract.
type CivilTCRContractChallengeIterator struct {
	Event *CivilTCRContractChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractChallenge represents a Challenge event raised by the CivilTCRContract contract.
type CivilTCRContractChallenge struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	Data           string
	CommitEndDate  *big.Int
	RevealEndDate  *big.Int
	Challenger     common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChallenge is a free log retrieval operation binding the contract event 0x9a8e3864cbacafc5547b8567796b4d12d51217a879192b61932f5151ce581310.
//
// Solidity: e _Challenge(listingAddress indexed address, challengeID indexed uint256, data string, commitEndDate uint256, revealEndDate uint256, challenger indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterChallenge(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int, challenger []common.Address) (*CivilTCRContractChallengeIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_Challenge", listingAddressRule, challengeIDRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractChallengeIterator{contract: _CivilTCRContract.contract, event: "_Challenge", logs: logs, sub: sub}, nil
}

// WatchChallenge is a free log subscription operation binding the contract event 0x9a8e3864cbacafc5547b8567796b4d12d51217a879192b61932f5151ce581310.
//
// Solidity: e _Challenge(listingAddress indexed address, challengeID indexed uint256, data string, commitEndDate uint256, revealEndDate uint256, challenger indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchChallenge(opts *bind.WatchOpts, sink chan<- *CivilTCRContractChallenge, listingAddress []common.Address, challengeID []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_Challenge", listingAddressRule, challengeIDRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractChallenge)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_Challenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractChallengeFailedIterator is returned from FilterChallengeFailed and is used to iterate over the raw logs and unpacked data for ChallengeFailed events raised by the CivilTCRContract contract.
type CivilTCRContractChallengeFailedIterator struct {
	Event *CivilTCRContractChallengeFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractChallengeFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractChallengeFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractChallengeFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractChallengeFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractChallengeFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractChallengeFailed represents a ChallengeFailed event raised by the CivilTCRContract contract.
type CivilTCRContractChallengeFailed struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	RewardPool     *big.Int
	TotalTokens    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChallengeFailed is a free log retrieval operation binding the contract event 0x3639145ca0a6a8008912a972730b5c8634e1fd1555ea44a257a8de53c30d72fb.
//
// Solidity: e _ChallengeFailed(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterChallengeFailed(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int) (*CivilTCRContractChallengeFailedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_ChallengeFailed", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractChallengeFailedIterator{contract: _CivilTCRContract.contract, event: "_ChallengeFailed", logs: logs, sub: sub}, nil
}

// WatchChallengeFailed is a free log subscription operation binding the contract event 0x3639145ca0a6a8008912a972730b5c8634e1fd1555ea44a257a8de53c30d72fb.
//
// Solidity: e _ChallengeFailed(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchChallengeFailed(opts *bind.WatchOpts, sink chan<- *CivilTCRContractChallengeFailed, listingAddress []common.Address, challengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_ChallengeFailed", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractChallengeFailed)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_ChallengeFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractChallengeSucceededIterator is returned from FilterChallengeSucceeded and is used to iterate over the raw logs and unpacked data for ChallengeSucceeded events raised by the CivilTCRContract contract.
type CivilTCRContractChallengeSucceededIterator struct {
	Event *CivilTCRContractChallengeSucceeded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractChallengeSucceededIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractChallengeSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractChallengeSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractChallengeSucceededIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractChallengeSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractChallengeSucceeded represents a ChallengeSucceeded event raised by the CivilTCRContract contract.
type CivilTCRContractChallengeSucceeded struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	RewardPool     *big.Int
	TotalTokens    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChallengeSucceeded is a free log retrieval operation binding the contract event 0xe86031b52c5a57c0768c3f196b63abf60b5ed012de77ce1bb88fc63588f7603a.
//
// Solidity: e _ChallengeSucceeded(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterChallengeSucceeded(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int) (*CivilTCRContractChallengeSucceededIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_ChallengeSucceeded", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractChallengeSucceededIterator{contract: _CivilTCRContract.contract, event: "_ChallengeSucceeded", logs: logs, sub: sub}, nil
}

// WatchChallengeSucceeded is a free log subscription operation binding the contract event 0xe86031b52c5a57c0768c3f196b63abf60b5ed012de77ce1bb88fc63588f7603a.
//
// Solidity: e _ChallengeSucceeded(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchChallengeSucceeded(opts *bind.WatchOpts, sink chan<- *CivilTCRContractChallengeSucceeded, listingAddress []common.Address, challengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_ChallengeSucceeded", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractChallengeSucceeded)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_ChallengeSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the CivilTCRContract contract.
type CivilTCRContractDepositIterator struct {
	Event *CivilTCRContractDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractDeposit represents a Deposit event raised by the CivilTCRContract contract.
type CivilTCRContractDeposit struct {
	ListingAddress common.Address
	Added          *big.Int
	NewTotal       *big.Int
	Owner          common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xfc2e298800eb7bcacdea96213f53962a6bdf27d2a560f831d4e42301492e8f6a.
//
// Solidity: e _Deposit(listingAddress indexed address, added uint256, newTotal uint256, owner indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterDeposit(opts *bind.FilterOpts, listingAddress []common.Address, owner []common.Address) (*CivilTCRContractDepositIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_Deposit", listingAddressRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractDepositIterator{contract: _CivilTCRContract.contract, event: "_Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xfc2e298800eb7bcacdea96213f53962a6bdf27d2a560f831d4e42301492e8f6a.
//
// Solidity: e _Deposit(listingAddress indexed address, added uint256, newTotal uint256, owner indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *CivilTCRContractDeposit, listingAddress []common.Address, owner []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_Deposit", listingAddressRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractDeposit)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractFailedChallengeOverturnedIterator is returned from FilterFailedChallengeOverturned and is used to iterate over the raw logs and unpacked data for FailedChallengeOverturned events raised by the CivilTCRContract contract.
type CivilTCRContractFailedChallengeOverturnedIterator struct {
	Event *CivilTCRContractFailedChallengeOverturned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractFailedChallengeOverturnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractFailedChallengeOverturned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractFailedChallengeOverturned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractFailedChallengeOverturnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractFailedChallengeOverturnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractFailedChallengeOverturned represents a FailedChallengeOverturned event raised by the CivilTCRContract contract.
type CivilTCRContractFailedChallengeOverturned struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	RewardPool     *big.Int
	TotalTokens    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFailedChallengeOverturned is a free log retrieval operation binding the contract event 0x446922bbfdaa528d4a969857cd0894d6bf8bbff52226624e752b3f1be7513b0a.
//
// Solidity: e _FailedChallengeOverturned(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterFailedChallengeOverturned(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int) (*CivilTCRContractFailedChallengeOverturnedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_FailedChallengeOverturned", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractFailedChallengeOverturnedIterator{contract: _CivilTCRContract.contract, event: "_FailedChallengeOverturned", logs: logs, sub: sub}, nil
}

// WatchFailedChallengeOverturned is a free log subscription operation binding the contract event 0x446922bbfdaa528d4a969857cd0894d6bf8bbff52226624e752b3f1be7513b0a.
//
// Solidity: e _FailedChallengeOverturned(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchFailedChallengeOverturned(opts *bind.WatchOpts, sink chan<- *CivilTCRContractFailedChallengeOverturned, listingAddress []common.Address, challengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_FailedChallengeOverturned", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractFailedChallengeOverturned)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_FailedChallengeOverturned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractGovernmentTransferedIterator is returned from FilterGovernmentTransfered and is used to iterate over the raw logs and unpacked data for GovernmentTransfered events raised by the CivilTCRContract contract.
type CivilTCRContractGovernmentTransferedIterator struct {
	Event *CivilTCRContractGovernmentTransfered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractGovernmentTransferedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractGovernmentTransfered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractGovernmentTransfered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractGovernmentTransferedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractGovernmentTransferedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractGovernmentTransfered represents a GovernmentTransfered event raised by the CivilTCRContract contract.
type CivilTCRContractGovernmentTransfered struct {
	NewGovernment common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGovernmentTransfered is a free log retrieval operation binding the contract event 0x016b4781993f669e6eac42012fead2d96f8381769b4efbb4ad686cca6031ea88.
//
// Solidity: e _GovernmentTransfered(newGovernment address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterGovernmentTransfered(opts *bind.FilterOpts) (*CivilTCRContractGovernmentTransferedIterator, error) {

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_GovernmentTransfered")
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractGovernmentTransferedIterator{contract: _CivilTCRContract.contract, event: "_GovernmentTransfered", logs: logs, sub: sub}, nil
}

// WatchGovernmentTransfered is a free log subscription operation binding the contract event 0x016b4781993f669e6eac42012fead2d96f8381769b4efbb4ad686cca6031ea88.
//
// Solidity: e _GovernmentTransfered(newGovernment address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchGovernmentTransfered(opts *bind.WatchOpts, sink chan<- *CivilTCRContractGovernmentTransfered) (event.Subscription, error) {

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_GovernmentTransfered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractGovernmentTransfered)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_GovernmentTransfered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractGrantedAppealChallengedIterator is returned from FilterGrantedAppealChallenged and is used to iterate over the raw logs and unpacked data for GrantedAppealChallenged events raised by the CivilTCRContract contract.
type CivilTCRContractGrantedAppealChallengedIterator struct {
	Event *CivilTCRContractGrantedAppealChallenged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractGrantedAppealChallengedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractGrantedAppealChallenged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractGrantedAppealChallenged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractGrantedAppealChallengedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractGrantedAppealChallengedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractGrantedAppealChallenged represents a GrantedAppealChallenged event raised by the CivilTCRContract contract.
type CivilTCRContractGrantedAppealChallenged struct {
	ListingAddress    common.Address
	ChallengeID       *big.Int
	AppealChallengeID *big.Int
	Data              string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGrantedAppealChallenged is a free log retrieval operation binding the contract event 0xedfe36bf00610fb3b5474f1efd2de0d52ffb9a50b056ee37c33cea805fd44161.
//
// Solidity: e _GrantedAppealChallenged(listingAddress indexed address, challengeID indexed uint256, appealChallengeID indexed uint256, data string)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterGrantedAppealChallenged(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int, appealChallengeID []*big.Int) (*CivilTCRContractGrantedAppealChallengedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}
	var appealChallengeIDRule []interface{}
	for _, appealChallengeIDItem := range appealChallengeID {
		appealChallengeIDRule = append(appealChallengeIDRule, appealChallengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_GrantedAppealChallenged", listingAddressRule, challengeIDRule, appealChallengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractGrantedAppealChallengedIterator{contract: _CivilTCRContract.contract, event: "_GrantedAppealChallenged", logs: logs, sub: sub}, nil
}

// WatchGrantedAppealChallenged is a free log subscription operation binding the contract event 0xedfe36bf00610fb3b5474f1efd2de0d52ffb9a50b056ee37c33cea805fd44161.
//
// Solidity: e _GrantedAppealChallenged(listingAddress indexed address, challengeID indexed uint256, appealChallengeID indexed uint256, data string)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchGrantedAppealChallenged(opts *bind.WatchOpts, sink chan<- *CivilTCRContractGrantedAppealChallenged, listingAddress []common.Address, challengeID []*big.Int, appealChallengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}
	var appealChallengeIDRule []interface{}
	for _, appealChallengeIDItem := range appealChallengeID {
		appealChallengeIDRule = append(appealChallengeIDRule, appealChallengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_GrantedAppealChallenged", listingAddressRule, challengeIDRule, appealChallengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractGrantedAppealChallenged)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_GrantedAppealChallenged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractGrantedAppealConfirmedIterator is returned from FilterGrantedAppealConfirmed and is used to iterate over the raw logs and unpacked data for GrantedAppealConfirmed events raised by the CivilTCRContract contract.
type CivilTCRContractGrantedAppealConfirmedIterator struct {
	Event *CivilTCRContractGrantedAppealConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractGrantedAppealConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractGrantedAppealConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractGrantedAppealConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractGrantedAppealConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractGrantedAppealConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractGrantedAppealConfirmed represents a GrantedAppealConfirmed event raised by the CivilTCRContract contract.
type CivilTCRContractGrantedAppealConfirmed struct {
	ListingAddress    common.Address
	ChallengeID       *big.Int
	AppealChallengeID *big.Int
	RewardPool        *big.Int
	TotalTokens       *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGrantedAppealConfirmed is a free log retrieval operation binding the contract event 0x8a7e8d1076fec4f93e4d57111b034ab3975009f601977350c4542e15d2e8b0f6.
//
// Solidity: e _GrantedAppealConfirmed(listingAddress indexed address, challengeID indexed uint256, appealChallengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterGrantedAppealConfirmed(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int, appealChallengeID []*big.Int) (*CivilTCRContractGrantedAppealConfirmedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}
	var appealChallengeIDRule []interface{}
	for _, appealChallengeIDItem := range appealChallengeID {
		appealChallengeIDRule = append(appealChallengeIDRule, appealChallengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_GrantedAppealConfirmed", listingAddressRule, challengeIDRule, appealChallengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractGrantedAppealConfirmedIterator{contract: _CivilTCRContract.contract, event: "_GrantedAppealConfirmed", logs: logs, sub: sub}, nil
}

// WatchGrantedAppealConfirmed is a free log subscription operation binding the contract event 0x8a7e8d1076fec4f93e4d57111b034ab3975009f601977350c4542e15d2e8b0f6.
//
// Solidity: e _GrantedAppealConfirmed(listingAddress indexed address, challengeID indexed uint256, appealChallengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchGrantedAppealConfirmed(opts *bind.WatchOpts, sink chan<- *CivilTCRContractGrantedAppealConfirmed, listingAddress []common.Address, challengeID []*big.Int, appealChallengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}
	var appealChallengeIDRule []interface{}
	for _, appealChallengeIDItem := range appealChallengeID {
		appealChallengeIDRule = append(appealChallengeIDRule, appealChallengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_GrantedAppealConfirmed", listingAddressRule, challengeIDRule, appealChallengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractGrantedAppealConfirmed)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_GrantedAppealConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractGrantedAppealOverturnedIterator is returned from FilterGrantedAppealOverturned and is used to iterate over the raw logs and unpacked data for GrantedAppealOverturned events raised by the CivilTCRContract contract.
type CivilTCRContractGrantedAppealOverturnedIterator struct {
	Event *CivilTCRContractGrantedAppealOverturned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractGrantedAppealOverturnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractGrantedAppealOverturned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractGrantedAppealOverturned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractGrantedAppealOverturnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractGrantedAppealOverturnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractGrantedAppealOverturned represents a GrantedAppealOverturned event raised by the CivilTCRContract contract.
type CivilTCRContractGrantedAppealOverturned struct {
	ListingAddress    common.Address
	ChallengeID       *big.Int
	AppealChallengeID *big.Int
	RewardPool        *big.Int
	TotalTokens       *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGrantedAppealOverturned is a free log retrieval operation binding the contract event 0xc49556ab8bcbdd0403e98b6dac260ac86008640cda2a5a229c895353b87f2feb.
//
// Solidity: e _GrantedAppealOverturned(listingAddress indexed address, challengeID indexed uint256, appealChallengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterGrantedAppealOverturned(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int, appealChallengeID []*big.Int) (*CivilTCRContractGrantedAppealOverturnedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}
	var appealChallengeIDRule []interface{}
	for _, appealChallengeIDItem := range appealChallengeID {
		appealChallengeIDRule = append(appealChallengeIDRule, appealChallengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_GrantedAppealOverturned", listingAddressRule, challengeIDRule, appealChallengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractGrantedAppealOverturnedIterator{contract: _CivilTCRContract.contract, event: "_GrantedAppealOverturned", logs: logs, sub: sub}, nil
}

// WatchGrantedAppealOverturned is a free log subscription operation binding the contract event 0xc49556ab8bcbdd0403e98b6dac260ac86008640cda2a5a229c895353b87f2feb.
//
// Solidity: e _GrantedAppealOverturned(listingAddress indexed address, challengeID indexed uint256, appealChallengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchGrantedAppealOverturned(opts *bind.WatchOpts, sink chan<- *CivilTCRContractGrantedAppealOverturned, listingAddress []common.Address, challengeID []*big.Int, appealChallengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}
	var appealChallengeIDRule []interface{}
	for _, appealChallengeIDItem := range appealChallengeID {
		appealChallengeIDRule = append(appealChallengeIDRule, appealChallengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_GrantedAppealOverturned", listingAddressRule, challengeIDRule, appealChallengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractGrantedAppealOverturned)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_GrantedAppealOverturned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractListingRemovedIterator is returned from FilterListingRemoved and is used to iterate over the raw logs and unpacked data for ListingRemoved events raised by the CivilTCRContract contract.
type CivilTCRContractListingRemovedIterator struct {
	Event *CivilTCRContractListingRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractListingRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractListingRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractListingRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractListingRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractListingRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractListingRemoved represents a ListingRemoved event raised by the CivilTCRContract contract.
type CivilTCRContractListingRemoved struct {
	ListingAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterListingRemoved is a free log retrieval operation binding the contract event 0x5aebb54d5afe29103adbc464fd4e0313af619f4d19f10a0209128b76cd9d0b07.
//
// Solidity: e _ListingRemoved(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterListingRemoved(opts *bind.FilterOpts, listingAddress []common.Address) (*CivilTCRContractListingRemovedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_ListingRemoved", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractListingRemovedIterator{contract: _CivilTCRContract.contract, event: "_ListingRemoved", logs: logs, sub: sub}, nil
}

// WatchListingRemoved is a free log subscription operation binding the contract event 0x5aebb54d5afe29103adbc464fd4e0313af619f4d19f10a0209128b76cd9d0b07.
//
// Solidity: e _ListingRemoved(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchListingRemoved(opts *bind.WatchOpts, sink chan<- *CivilTCRContractListingRemoved, listingAddress []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_ListingRemoved", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractListingRemoved)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_ListingRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractListingWithdrawnIterator is returned from FilterListingWithdrawn and is used to iterate over the raw logs and unpacked data for ListingWithdrawn events raised by the CivilTCRContract contract.
type CivilTCRContractListingWithdrawnIterator struct {
	Event *CivilTCRContractListingWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractListingWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractListingWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractListingWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractListingWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractListingWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractListingWithdrawn represents a ListingWithdrawn event raised by the CivilTCRContract contract.
type CivilTCRContractListingWithdrawn struct {
	ListingAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterListingWithdrawn is a free log retrieval operation binding the contract event 0x09a024f7311a15ac363521bddca1d9937c4244ab9a25e6c968e610b35ecc7503.
//
// Solidity: e _ListingWithdrawn(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterListingWithdrawn(opts *bind.FilterOpts, listingAddress []common.Address) (*CivilTCRContractListingWithdrawnIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_ListingWithdrawn", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractListingWithdrawnIterator{contract: _CivilTCRContract.contract, event: "_ListingWithdrawn", logs: logs, sub: sub}, nil
}

// WatchListingWithdrawn is a free log subscription operation binding the contract event 0x09a024f7311a15ac363521bddca1d9937c4244ab9a25e6c968e610b35ecc7503.
//
// Solidity: e _ListingWithdrawn(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchListingWithdrawn(opts *bind.WatchOpts, sink chan<- *CivilTCRContractListingWithdrawn, listingAddress []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_ListingWithdrawn", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractListingWithdrawn)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_ListingWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the CivilTCRContract contract.
type CivilTCRContractRewardClaimedIterator struct {
	Event *CivilTCRContractRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractRewardClaimed represents a RewardClaimed event raised by the CivilTCRContract contract.
type CivilTCRContractRewardClaimed struct {
	ChallengeID *big.Int
	Reward      *big.Int
	Voter       common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0x6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957.
//
// Solidity: e _RewardClaimed(challengeID indexed uint256, reward uint256, voter indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterRewardClaimed(opts *bind.FilterOpts, challengeID []*big.Int, voter []common.Address) (*CivilTCRContractRewardClaimedIterator, error) {

	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_RewardClaimed", challengeIDRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractRewardClaimedIterator{contract: _CivilTCRContract.contract, event: "_RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0x6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957.
//
// Solidity: e _RewardClaimed(challengeID indexed uint256, reward uint256, voter indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *CivilTCRContractRewardClaimed, challengeID []*big.Int, voter []common.Address) (event.Subscription, error) {

	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_RewardClaimed", challengeIDRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractRewardClaimed)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractSuccessfulChallengeOverturnedIterator is returned from FilterSuccessfulChallengeOverturned and is used to iterate over the raw logs and unpacked data for SuccessfulChallengeOverturned events raised by the CivilTCRContract contract.
type CivilTCRContractSuccessfulChallengeOverturnedIterator struct {
	Event *CivilTCRContractSuccessfulChallengeOverturned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractSuccessfulChallengeOverturnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractSuccessfulChallengeOverturned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractSuccessfulChallengeOverturned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractSuccessfulChallengeOverturnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractSuccessfulChallengeOverturnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractSuccessfulChallengeOverturned represents a SuccessfulChallengeOverturned event raised by the CivilTCRContract contract.
type CivilTCRContractSuccessfulChallengeOverturned struct {
	ListingAddress common.Address
	ChallengeID    *big.Int
	RewardPool     *big.Int
	TotalTokens    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSuccessfulChallengeOverturned is a free log retrieval operation binding the contract event 0x72506b3ce4d8f0cf8cf6ccb7cd5281af2b0d020121fb20abfa073eeb3f6d296e.
//
// Solidity: e _SuccessfulChallengeOverturned(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterSuccessfulChallengeOverturned(opts *bind.FilterOpts, listingAddress []common.Address, challengeID []*big.Int) (*CivilTCRContractSuccessfulChallengeOverturnedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_SuccessfulChallengeOverturned", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractSuccessfulChallengeOverturnedIterator{contract: _CivilTCRContract.contract, event: "_SuccessfulChallengeOverturned", logs: logs, sub: sub}, nil
}

// WatchSuccessfulChallengeOverturned is a free log subscription operation binding the contract event 0x72506b3ce4d8f0cf8cf6ccb7cd5281af2b0d020121fb20abfa073eeb3f6d296e.
//
// Solidity: e _SuccessfulChallengeOverturned(listingAddress indexed address, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchSuccessfulChallengeOverturned(opts *bind.WatchOpts, sink chan<- *CivilTCRContractSuccessfulChallengeOverturned, listingAddress []common.Address, challengeID []*big.Int) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_SuccessfulChallengeOverturned", listingAddressRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractSuccessfulChallengeOverturned)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_SuccessfulChallengeOverturned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractTouchAndRemovedIterator is returned from FilterTouchAndRemoved and is used to iterate over the raw logs and unpacked data for TouchAndRemoved events raised by the CivilTCRContract contract.
type CivilTCRContractTouchAndRemovedIterator struct {
	Event *CivilTCRContractTouchAndRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractTouchAndRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractTouchAndRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractTouchAndRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractTouchAndRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractTouchAndRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractTouchAndRemoved represents a TouchAndRemoved event raised by the CivilTCRContract contract.
type CivilTCRContractTouchAndRemoved struct {
	ListingAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTouchAndRemoved is a free log retrieval operation binding the contract event 0xc88462fa6972b64560d1dd34c4d66f2ff9841b2f974bdb0fab0827133d692f64.
//
// Solidity: e _TouchAndRemoved(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterTouchAndRemoved(opts *bind.FilterOpts, listingAddress []common.Address) (*CivilTCRContractTouchAndRemovedIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_TouchAndRemoved", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractTouchAndRemovedIterator{contract: _CivilTCRContract.contract, event: "_TouchAndRemoved", logs: logs, sub: sub}, nil
}

// WatchTouchAndRemoved is a free log subscription operation binding the contract event 0xc88462fa6972b64560d1dd34c4d66f2ff9841b2f974bdb0fab0827133d692f64.
//
// Solidity: e _TouchAndRemoved(listingAddress indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchTouchAndRemoved(opts *bind.WatchOpts, sink chan<- *CivilTCRContractTouchAndRemoved, listingAddress []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_TouchAndRemoved", listingAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractTouchAndRemoved)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_TouchAndRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CivilTCRContractWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the CivilTCRContract contract.
type CivilTCRContractWithdrawalIterator struct {
	Event *CivilTCRContractWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CivilTCRContractWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CivilTCRContractWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CivilTCRContractWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CivilTCRContractWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CivilTCRContractWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CivilTCRContractWithdrawal represents a Withdrawal event raised by the CivilTCRContract contract.
type CivilTCRContractWithdrawal struct {
	ListingAddress common.Address
	Withdrew       *big.Int
	NewTotal       *big.Int
	Owner          common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x7b7771adeec078e4a338f627a52f307a7fd66d915cb133b5ace441bed26abc0b.
//
// Solidity: e _Withdrawal(listingAddress indexed address, withdrew uint256, newTotal uint256, owner indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) FilterWithdrawal(opts *bind.FilterOpts, listingAddress []common.Address, owner []common.Address) (*CivilTCRContractWithdrawalIterator, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _CivilTCRContract.contract.FilterLogs(opts, "_Withdrawal", listingAddressRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &CivilTCRContractWithdrawalIterator{contract: _CivilTCRContract.contract, event: "_Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0x7b7771adeec078e4a338f627a52f307a7fd66d915cb133b5ace441bed26abc0b.
//
// Solidity: e _Withdrawal(listingAddress indexed address, withdrew uint256, newTotal uint256, owner indexed address)
func (_CivilTCRContract *CivilTCRContractFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *CivilTCRContractWithdrawal, listingAddress []common.Address, owner []common.Address) (event.Subscription, error) {

	var listingAddressRule []interface{}
	for _, listingAddressItem := range listingAddress {
		listingAddressRule = append(listingAddressRule, listingAddressItem)
	}

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _CivilTCRContract.contract.WatchLogs(opts, "_Withdrawal", listingAddressRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CivilTCRContractWithdrawal)
				if err := _CivilTCRContract.contract.UnpackLog(event, "_Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
