// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// ParameterizerContractABI is the input ABI used to generate the binding from.
const ParameterizerContractABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"PROCESSBY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"appExpiry\",\"type\":\"uint256\"},{\"name\":\"challengeID\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"processBy\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"resolved\",\"type\":\"bool\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"winningTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_plcr\",\"type\":\"address\"},{\"name\":\"_parameters\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"appEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"_ReparameterizationProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commitEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revealEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"_NewChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"}],\"name\":\"_ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_ChallengeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_RewardClaimed\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"proposeReparameterization\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"challengeReparameterization\",\"outputs\":[{\"name\":\"challengeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"processProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_challengeIDs\",\"type\":\"uint256[]\"},{\"name\":\"_salts\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"voterReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"canBeSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"propExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"challengeCanBeResolved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"}],\"name\":\"challengeWinnerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"tokenClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ParameterizerContractBin is the compiled bytecode used for deploying new contracts.
const ParameterizerContractBin = `0x608060405262093a806005553480156200001857600080fd5b50604051620028683803806200286883398101604081815282516020808501518386015160038054600160a060020a03808716600160a060020a0319928316179092556004805492851692909116919091179055848601909452600a85527f6d696e4465706f736974000000000000000000000000000000000000000000009185019190915291909301805191929091620000db919083906000908110620000bc57fe5b9060200190602002015162000412640100000000026401000000009004565b620001256040805190810160405280600b81526020017f704d696e4465706f736974000000000000000000000000000000000000000000815250826001815181101515620000bc57fe5b6200016f6040805190810160405280600d81526020017f6170706c7953746167654c656e00000000000000000000000000000000000000815250826002815181101515620000bc57fe5b620001b96040805190810160405280600e81526020017f704170706c7953746167654c656e000000000000000000000000000000000000815250826003815181101515620000bc57fe5b620002036040805190810160405280600e81526020017f636f6d6d697453746167654c656e000000000000000000000000000000000000815250826004815181101515620000bc57fe5b6200024d6040805190810160405280600f81526020017f70436f6d6d697453746167654c656e0000000000000000000000000000000000815250826005815181101515620000bc57fe5b620002976040805190810160405280600e81526020017f72657665616c53746167654c656e000000000000000000000000000000000000815250826006815181101515620000bc57fe5b620002e16040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250826007815181101515620000bc57fe5b6200032b6040805190810160405280600f81526020017f64697370656e736174696f6e5063740000000000000000000000000000000000815250826008815181101515620000bc57fe5b620003756040805190810160405280601081526020017f7044697370656e736174696f6e50637400000000000000000000000000000000815250826009815181101515620000bc57fe5b620003bf6040805190810160405280600a81526020017f766f746551756f72756d0000000000000000000000000000000000000000000081525082600a815181101515620000bc57fe5b620004096040805190810160405280600b81526020017f70566f746551756f72756d00000000000000000000000000000000000000000081525082600b815181101515620000bc57fe5b5050506200048a565b80600080846040518082805190602001908083835b60208310620004485780518252601f19909201916020918201910162000427565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020939093555050505050565b6123ce806200049a6000396000f3006080604052600436106100fa5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166229514f81146100ff57806330490e911461012657806332ed5b1214610140578063353009901461020c57806350411552146102385780635f02116f14610250578063693ec85e146102de57806377609a41146103375780638240ae4b1461034f57806386bb8f37146103675780638f1d377614610382578063a5ba3b1e146103cd578063a7aad3db146103f1578063bade1c5414610418578063c51131fb14610473578063dc6ab5271461048b578063fc0c546a146104a3578063fce1ccca146104d4575b600080fd5b34801561010b57600080fd5b506101146104e9565b60408051918252519081900360200190f35b34801561013257600080fd5b5061013e6004356104ef565b005b34801561014c57600080fd5b506101586004356109ca565b604051808881526020018781526020018681526020018060200185600160a060020a0316600160a060020a03168152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156101cb5781810151838201526020016101b3565b50505050905090810190601f1680156101f85780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561021857600080fd5b50610224600435610a96565b604080519115158252519081900360200190f35b34801561024457600080fd5b50610114600435610aaf565b34801561025c57600080fd5b506040805160206004803580820135838102808601850190965280855261013e95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b819650505050505050565b3480156102ea57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610114943694929360249392840191908190840183828082843750949750610be49650505050505050565b34801561034357600080fd5b50610224600435610c5a565b34801561035b57600080fd5b50610114600435610e73565b34801561037357600080fd5b5061013e6004356024356113ab565b34801561038e57600080fd5b5061039a6004356115b7565b60408051958652600160a060020a0390941660208601529115158484015260608401526080830152519081900360a00190f35b3480156103d957600080fd5b50610224600435600160a060020a03602435166115f4565b3480156103fd57600080fd5b50610114600160a060020a0360043516602435604435611624565b34801561042457600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261011494369492936024939284019190819084018382808284375094975050933594506116fa9350505050565b34801561047f57600080fd5b50610224600435611bd0565b34801561049757600080fd5b50610114600435611cf3565b3480156104af57600080fd5b506104b8611d05565b60408051600160a060020a039092168252519081900360200190f35b3480156104e057600080fd5b506104b8611d14565b60055481565b60008181526002602081905260409091206004810154918101549091600160a060020a03169061051e84611bd0565b1561077857600383018054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526105c193909290918301828280156105b25780601f10610587576101008083540402835291602001916105b2565b820191906000526020600020905b81548152906001019060200180831161059557829003601f168201915b50505050508460060154611d23565b600683015460408051602081018390528181526003860180546002610100600183161502600019019091160492820183905287937f37f3986c71e1aa2c470cfc4a92af70820610c3065589d35ef1664ea27f3e73a5939192909181906060820190859080156106715780601f1061064657610100808354040283529160200191610671565b820191906000526020600020905b81548152906001019060200180831161065457829003601f168201915b5050935050505060405180910390a26000848152600260208190526040822082815560018101839055908101829055906106ae600383018261223e565b506004818101805473ffffffffffffffffffffffffffffffffffffffff1916905560006005830181905560069092018290556003546040805160e060020a63a9059cbb028152600160a060020a0387811694820194909452602481018690529051929091169263a9059cbb926044808401936020939083900390910190829087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b505050506040513d602081101561076657600080fd5b5051151561077357600080fd5b6107f4565b61078184610c5a565b1561078f5761077384611d99565b82600501544211156100fa5760405184907f29026cb2acebe6d0a4b6d593ccadf76e3fc6d0a02254e078b0c4a619608089d790600090a26000848152600260208190526040822082815560018101839055908101829055906106ae600383018261223e565b60646108346040805190810160405280600f81526020017f64697370656e736174696f6e5063740000000000000000000000000000000000815250610be4565b111561083c57fe5b606461087c6040805190810160405280601081526020017f7044697370656e736174696f6e50637400000000000000000000000000000000815250610be4565b111561088457fe5b61096660055461095a6108cb6040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250610be4565b61095a61090c6040805190810160405280600f81526020017f70436f6d6d697453746167654c656e0000000000000000000000000000000000815250610be4565b61095a61094d6040805190810160405280600e81526020017f704170706c7953746167654c656e000000000000000000000000000000000000815250610be4565b429063ffffffff6121e116565b9063ffffffff6121e116565b50600084815260026020819052604082208281556001810183905590810182905590610995600383018261223e565b5060048101805473ffffffffffffffffffffffffffffffffffffffff1916905560006005820181905560069091015550505050565b60026020818152600092835260409283902080546001808301548386015460038501805489519481161561010002600019011697909704601f8101879004870284018701909852878352929690959294919291830182828015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b50505050600483015460058401546006909401549293600160a060020a039091169290915087565b600081815260026020526040812060050154115b919050565b60048054604080517f053e71a600000000000000000000000000000000000000000000000000000000815292830184905251600092600160a060020a039092169163053e71a691602480830192602092919082900301818787803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b505050506040513d6020811015610b4057600080fd5b50511515610b635750600081815260016020526040902060029081015402610aaa565b50600090815260016020526040902080546002918201549091020390565b8051825160009114610b9257600080fd5b5060005b8251811015610bdf57610bd78382815181101515610bb057fe5b906020019060200201518383815181101515610bc857fe5b906020019060200201516113ab565b600101610b96565b505050565b6000806000836040518082805190602001908083835b60208310610c195780518252601f199092019160209182019101610bfa565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205495945050505050565b6000610c64612285565b610c6c6122cc565b600084815260026020818152604092839020835160e0810185528154815260018083015482850152828501548287015260038301805487516000199382161561010002939093011695909504601f810185900485028201850190965285815290949193606086019391929091830182828015610d295780601f10610cfe57610100808354040283529160200191610d29565b820191906000526020600020905b815481529060010190602001808311610d0c57829003601f168201915b50505091835250506004820154600160a060020a039081166020808401919091526005840154604080850191909152600690940154606093840152848101805160009081526001808452868220875160a08101895281548152918101549586169482019490945260a060020a90940460ff1615159584019590955260028201549383019390935260030154608082015290519294509250108015610dcf57506040810151155b8015610e6b575060048054602080850151604080517fee6848300000000000000000000000000000000000000000000000000000000081529485019190915251600160a060020a039092169263ee68483092602480830193928290030181600087803b158015610e3e57600080fd5b505af1158015610e52573d6000803e3d6000fd5b505050506040513d6020811015610e6857600080fd5b50515b949350505050565b6000610e7d612285565b6000838152600260208181526040808420815160e0810183528154815260018083015482860152828601548285015260038301805485516000199382161561010002939093011696909604601f810186900486028201860190945283815286958695869593949360608601939291830182828015610f3c5780601f10610f1157610100808354040283529160200191610f3c565b820191906000526020600020905b815481529060010190602001808311610f1f57829003601f168201915b50505091835250506004820154600160a060020a0316602082015260058201546040808301919091526006909201546060909101528101519095509350610f8287610a96565b8015610f9057506020850151155b1515610f9b57600080fd5b60045460408051808201909152600b81527f70566f746551756f72756d0000000000000000000000000000000000000000006020820152600160a060020a03909116906332ed3d6090610fed90610be4565b61102b6040805190810160405280600f81526020017f70436f6d6d697453746167654c656e0000000000000000000000000000000000815250610be4565b6110696040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250610be4565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b505050506040513d60208110156110f357600080fd5b50516040805160e08101909152601060a082019081527f7044697370656e736174696f6e5063740000000000000000000000000000000060c083015291945090819061116e9060649061116290899061115690849061115190610be4565b6121ee565b9063ffffffff61220016565b9063ffffffff61222916565b81523360208083018290526000604080850182905260608086018b905260809586018390528983526001808552828420885181558886015181830180548b87015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039384161774ff0000000000000000000000000000000000000000191660a060020a911515919091021790559289015160028083019190915598909701516003978801558e8452968452818320909601899055935484517f23b872dd0000000000000000000000000000000000000000000000000000000081526004810194909452306024850152604484018a9052935193909416936323b872dd936064808501949192918390030190829087803b15801561128a57600080fd5b505af115801561129e573d6000803e3d6000fd5b505050506040513d60208110156112b457600080fd5b505115156112c157600080fd5b60048054604080517f6148fed500000000000000000000000000000000000000000000000000000000815292830186905251600160a060020a0390911691636148fed59160248083019260a09291908290030181600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b505050506040513d60a081101561135057600080fd5b50805160209182015160408051878152938401839052838101829052519194509250339189917fe94e3086c4bfe84acba4437b85a80fca3721dfc419d1f7afe4fa4e470e670b489181900360600190a3509095945050505050565b6000828152600160209081526040808320338452600401909152812054819060ff16156113d757600080fd5b600084815260016020819052604090912081015460a060020a900460ff1615151461140157600080fd5b60048054604080517fb43bd0690000000000000000000000000000000000000000000000000000000081523393810193909352602483018790526044830186905251600160a060020a039091169163b43bd0699160648083019260209291908290030181600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b505050506040513d60208110156114a057600080fd5b505191506114af338585611624565b6000858152600160208181526040808420600381018054899003905580548690038155338086526004909101835293819020805460ff191690931790925581518481529151939450919287927f6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957928290030190a36003546040805160e060020a63a9059cbb028152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561157a57600080fd5b505af115801561158e573d6000803e3d6000fd5b505050506040513d60208110156115a457600080fd5b505115156115b157600080fd5b50505050565b60016020819052600091825260409091208054918101546002820154600390920154600160a060020a0382169260a060020a90920460ff16919085565b6000828152600160209081526040808320600160a060020a038516845260040190915290205460ff165b92915050565b6000828152600160209081526040808320600381015490546004805484517fb43bd069000000000000000000000000000000000000000000000000000000008152600160a060020a038b811693820193909352602481018a9052604481018990529451939592948794929091169263b43bd0699260648084019382900301818787803b1580156116b357600080fd5b505af11580156116c7573d6000803e3d6000fd5b505050506040513d60208110156116dd57600080fd5b50519050828282028115156116ee57fe5b04979650505050505050565b600080600061173d6040805190810160405280600b81526020017f704d696e4465706f736974000000000000000000000000000000000000000000815250610be4565b915084846040518083805190602001908083835b602083106117705780518252601f199092019160209182019101611751565b51815160001960209485036101000a019081169019919091161790529201938452506040805193849003820184207f64697370656e736174696f6e50637400000000000000000000000000000000008552905193849003600f0184208a5191965094508993925082918401908083835b602083106117ff5780518252601f1990920191602091820191016117e0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614806118cc5750604080517f7044697370656e736174696f6e5063740000000000000000000000000000000081529051908190036010018120865190918791819060208401908083835b602083106118995780518252601f19909201916020918201910161187a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b156118df5760648411156118df57600080fd5b6118e881610a96565b156118f257600080fd5b836118fc86610be4565b141561190757600080fd5b604080516101208101909152600e60e082019081527f704170706c7953746167654c656e00000000000000000000000000000000000061010083015281906119529061094d90610be4565b81526020016000815260200183815260200186815260200133600160a060020a031681526020016119c060055461095a6108cb6040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250610be4565b8152602090810186905260008381526002808352604091829020845181558484015160018201559184015190820155606083015180519192611a0a92600385019290910190612307565b5060808201516004828101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0393841617905560a0840151600584015560c090930151600690920191909155600354604080517f23b872dd000000000000000000000000000000000000000000000000000000008152339481019490945230602485015260448401869052519116916323b872dd9160648083019260209291908290030181600087803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b50511515611af657600080fd5b6000818152600260209081526040808320548151808401899052918201859052606082018690526080820181905260a0808352895190830152885133947fb25bdef16105f099e5c185f9c7fd969571e8e0caa3f7bd75409512fe0a41a60b948b948b9489948b949193839260c0840192918a0191908190849084905b83811015611b8a578181015183820152602001611b72565b50505050905090810190601f168015611bb75780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a2949350505050565b6000611bda612285565b600083815260026020818152604092839020835160e0810185528154815260018083015482850152828501548287015260038301805487516000199382161561010002939093011695909504601f810185900485028201850190965285815290949193606086019391929091830182828015611c975780601f10611c6c57610100808354040283529160200191611c97565b820191906000526020600020905b815481529060010190602001808311611c7a57829003601f168201915b50505091835250506004820154600160a060020a0316602082015260058201546040820152600690910154606090910152805190915042118015611cde57508060a0015142105b8015611cec57506020810151155b9392505050565b60006020819052908152604090205481565b600354600160a060020a031681565b600454600160a060020a031681565b80600080846040518082805190602001908083835b60208310611d575780518252601f199092019160209182019101611d38565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020939093555050505050565b611da1612285565b6000828152600260208181526040808420815160e0810183528154815260018083015482860152828601548285015260038301805485516000199382161561010002939093011696909604601f81018690048602820186019094528381528695919492936060860193919291830182828015611e5e5780601f10611e3357610100808354040283529160200191611e5e565b820191906000526020600020905b815481529060010190602001808311611e4157829003601f168201915b505050505081526020016004820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160058201548152602001600682015481525050925060016000846020015181526020019081526020016000209150611ed28360200151610aaf565b60048054602080870151604080517f053e71a60000000000000000000000000000000000000000000000000000000081529485019190915251939450600160a060020a039091169263053e71a69260248082019392918290030181600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b505050506040513d6020811015611f6857600080fd5b5051600383015560018201805474ff0000000000000000000000000000000000000000191660a060020a17905560048054602085810151604080517f494031830000000000000000000000000000000000000000000000000000000081529485019190915251600160a060020a0390921692634940318392602480830193928290030181600087803b158015611ffd57600080fd5b505af1158015612011573d6000803e3d6000fd5b505050506040513d602081101561202757600080fd5b50511561212e57428360a00151111561204c5761204c83606001518460c00151611d23565b6020808401518354600385015460408051928352938201528251919287927fc4497224aa78dd50c9b3e344aab02596201ca1e6dca4057a91a6c02f83f4f6c19281900390910190a360035460808401516040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156120f257600080fd5b505af1158015612106573d6000803e3d6000fd5b505050506040513d602081101561211c57600080fd5b5051151561212957600080fd5b6115b1565b6020808401518354600385015460408051928352938201528251919287927f362a12431f779a2baff4f77f75ba7960ae993a5c41b425df11f7fd0af2b9cbe69281900390910190a360035460208085015160009081526001808352604080832090910154815160e060020a63a9059cbb028152600160a060020a03918216600482015260248101879052915194169363a9059cbb9360448084019491938390030190829087803b15801561157a57600080fd5b8181018281101561161e57fe5b6000828211156121fa57fe5b50900390565b60008215156122115750600061161e565b5081810281838281151561222157fe5b041461161e57fe5b6000818381151561223657fe5b049392505050565b50805460018160011615610100020316600290046000825580601f106122645750612282565b601f0160209004906000526020600020908101906122829190612385565b50565b60e060405190810160405280600081526020016000815260200160008152602001606081526020016000600160a060020a0316815260200160008152602001600081525090565b60a060405190810160405280600081526020016000600160a060020a0316815260200160001515815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061234857805160ff1916838001178555612375565b82800160010185558215612375579182015b8281111561237557825182559160200191906001019061235a565b50612381929150612385565b5090565b61239f91905b80821115612381576000815560010161238b565b905600a165627a7a723058200efe1007e0e193bae7df5c27891de37dabd0a14e1692105565ac6fa90fbff4ea0029`

// DeployParameterizerContract deploys a new Ethereum contract, binding an instance of ParameterizerContract to it.
func DeployParameterizerContract(auth *bind.TransactOpts, backend bind.ContractBackend, _token common.Address, _plcr common.Address, _parameters []*big.Int) (common.Address, *types.Transaction, *ParameterizerContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParameterizerContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ParameterizerContractBin), backend, _token, _plcr, _parameters)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParameterizerContract{ParameterizerContractCaller: ParameterizerContractCaller{contract: contract}, ParameterizerContractTransactor: ParameterizerContractTransactor{contract: contract}, ParameterizerContractFilterer: ParameterizerContractFilterer{contract: contract}}, nil
}

// ParameterizerContract is an auto generated Go binding around an Ethereum contract.
type ParameterizerContract struct {
	ParameterizerContractCaller     // Read-only binding to the contract
	ParameterizerContractTransactor // Write-only binding to the contract
	ParameterizerContractFilterer   // Log filterer for contract events
}

// ParameterizerContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParameterizerContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParameterizerContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParameterizerContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParameterizerContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParameterizerContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParameterizerContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParameterizerContractSession struct {
	Contract     *ParameterizerContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ParameterizerContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParameterizerContractCallerSession struct {
	Contract *ParameterizerContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ParameterizerContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParameterizerContractTransactorSession struct {
	Contract     *ParameterizerContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ParameterizerContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParameterizerContractRaw struct {
	Contract *ParameterizerContract // Generic contract binding to access the raw methods on
}

// ParameterizerContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParameterizerContractCallerRaw struct {
	Contract *ParameterizerContractCaller // Generic read-only contract binding to access the raw methods on
}

// ParameterizerContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParameterizerContractTransactorRaw struct {
	Contract *ParameterizerContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParameterizerContract creates a new instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContract(address common.Address, backend bind.ContractBackend) (*ParameterizerContract, error) {
	contract, err := bindParameterizerContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContract{ParameterizerContractCaller: ParameterizerContractCaller{contract: contract}, ParameterizerContractTransactor: ParameterizerContractTransactor{contract: contract}, ParameterizerContractFilterer: ParameterizerContractFilterer{contract: contract}}, nil
}

// NewParameterizerContractCaller creates a new read-only instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContractCaller(address common.Address, caller bind.ContractCaller) (*ParameterizerContractCaller, error) {
	contract, err := bindParameterizerContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractCaller{contract: contract}, nil
}

// NewParameterizerContractTransactor creates a new write-only instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ParameterizerContractTransactor, error) {
	contract, err := bindParameterizerContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractTransactor{contract: contract}, nil
}

// NewParameterizerContractFilterer creates a new log filterer instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ParameterizerContractFilterer, error) {
	contract, err := bindParameterizerContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractFilterer{contract: contract}, nil
}

// bindParameterizerContract binds a generic wrapper to an already deployed contract.
func bindParameterizerContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParameterizerContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParameterizerContract *ParameterizerContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParameterizerContract.Contract.ParameterizerContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParameterizerContract *ParameterizerContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ParameterizerContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParameterizerContract *ParameterizerContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ParameterizerContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParameterizerContract *ParameterizerContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParameterizerContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParameterizerContract *ParameterizerContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParameterizerContract *ParameterizerContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.contract.Transact(opts, method, params...)
}

// PROCESSBY is a free data retrieval call binding the contract method 0x0029514f.
//
// Solidity: function PROCESSBY() constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) PROCESSBY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "PROCESSBY")
	return *ret0, err
}

// PROCESSBY is a free data retrieval call binding the contract method 0x0029514f.
//
// Solidity: function PROCESSBY() constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) PROCESSBY() (*big.Int, error) {
	return _ParameterizerContract.Contract.PROCESSBY(&_ParameterizerContract.CallOpts)
}

// PROCESSBY is a free data retrieval call binding the contract method 0x0029514f.
//
// Solidity: function PROCESSBY() constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) PROCESSBY() (*big.Int, error) {
	return _ParameterizerContract.Contract.PROCESSBY(&_ParameterizerContract.CallOpts)
}

// CanBeSet is a free data retrieval call binding the contract method 0xc51131fb.
//
// Solidity: function canBeSet(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) CanBeSet(opts *bind.CallOpts, _propID [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "canBeSet", _propID)
	return *ret0, err
}

// CanBeSet is a free data retrieval call binding the contract method 0xc51131fb.
//
// Solidity: function canBeSet(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) CanBeSet(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.CanBeSet(&_ParameterizerContract.CallOpts, _propID)
}

// CanBeSet is a free data retrieval call binding the contract method 0xc51131fb.
//
// Solidity: function canBeSet(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) CanBeSet(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.CanBeSet(&_ParameterizerContract.CallOpts, _propID)
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x77609a41.
//
// Solidity: function challengeCanBeResolved(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) ChallengeCanBeResolved(opts *bind.CallOpts, _propID [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "challengeCanBeResolved", _propID)
	return *ret0, err
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x77609a41.
//
// Solidity: function challengeCanBeResolved(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) ChallengeCanBeResolved(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.ChallengeCanBeResolved(&_ParameterizerContract.CallOpts, _propID)
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x77609a41.
//
// Solidity: function challengeCanBeResolved(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) ChallengeCanBeResolved(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.ChallengeCanBeResolved(&_ParameterizerContract.CallOpts, _propID)
}

// ChallengeWinnerReward is a free data retrieval call binding the contract method 0x50411552.
//
// Solidity: function challengeWinnerReward(_challengeID uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) ChallengeWinnerReward(opts *bind.CallOpts, _challengeID *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "challengeWinnerReward", _challengeID)
	return *ret0, err
}

// ChallengeWinnerReward is a free data retrieval call binding the contract method 0x50411552.
//
// Solidity: function challengeWinnerReward(_challengeID uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) ChallengeWinnerReward(_challengeID *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.ChallengeWinnerReward(&_ParameterizerContract.CallOpts, _challengeID)
}

// ChallengeWinnerReward is a free data retrieval call binding the contract method 0x50411552.
//
// Solidity: function challengeWinnerReward(_challengeID uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) ChallengeWinnerReward(_challengeID *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.ChallengeWinnerReward(&_ParameterizerContract.CallOpts, _challengeID)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, winningTokens uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	RewardPool    *big.Int
	Challenger    common.Address
	Resolved      bool
	Stake         *big.Int
	WinningTokens *big.Int
}, error) {
	ret := new(struct {
		RewardPool    *big.Int
		Challenger    common.Address
		Resolved      bool
		Stake         *big.Int
		WinningTokens *big.Int
	})
	out := ret
	err := _ParameterizerContract.contract.Call(opts, out, "challenges", arg0)
	return *ret, err
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, winningTokens uint256)
func (_ParameterizerContract *ParameterizerContractSession) Challenges(arg0 *big.Int) (struct {
	RewardPool    *big.Int
	Challenger    common.Address
	Resolved      bool
	Stake         *big.Int
	WinningTokens *big.Int
}, error) {
	return _ParameterizerContract.Contract.Challenges(&_ParameterizerContract.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, winningTokens uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Challenges(arg0 *big.Int) (struct {
	RewardPool    *big.Int
	Challenger    common.Address
	Resolved      bool
	Stake         *big.Int
	WinningTokens *big.Int
}, error) {
	return _ParameterizerContract.Contract.Challenges(&_ParameterizerContract.CallOpts, arg0)
}

// Get is a free data retrieval call binding the contract method 0x693ec85e.
//
// Solidity: function get(_name string) constant returns(value uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Get(opts *bind.CallOpts, _name string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "get", _name)
	return *ret0, err
}

// Get is a free data retrieval call binding the contract method 0x693ec85e.
//
// Solidity: function get(_name string) constant returns(value uint256)
func (_ParameterizerContract *ParameterizerContractSession) Get(_name string) (*big.Int, error) {
	return _ParameterizerContract.Contract.Get(&_ParameterizerContract.CallOpts, _name)
}

// Get is a free data retrieval call binding the contract method 0x693ec85e.
//
// Solidity: function get(_name string) constant returns(value uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Get(_name string) (*big.Int, error) {
	return _ParameterizerContract.Contract.Get(&_ParameterizerContract.CallOpts, _name)
}

// Params is a free data retrieval call binding the contract method 0xdc6ab527.
//
// Solidity: function params( bytes32) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Params(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "params", arg0)
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xdc6ab527.
//
// Solidity: function params( bytes32) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) Params(arg0 [32]byte) (*big.Int, error) {
	return _ParameterizerContract.Contract.Params(&_ParameterizerContract.CallOpts, arg0)
}

// Params is a free data retrieval call binding the contract method 0xdc6ab527.
//
// Solidity: function params( bytes32) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Params(arg0 [32]byte) (*big.Int, error) {
	return _ParameterizerContract.Contract.Params(&_ParameterizerContract.CallOpts, arg0)
}

// PropExists is a free data retrieval call binding the contract method 0x35300990.
//
// Solidity: function propExists(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) PropExists(opts *bind.CallOpts, _propID [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "propExists", _propID)
	return *ret0, err
}

// PropExists is a free data retrieval call binding the contract method 0x35300990.
//
// Solidity: function propExists(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) PropExists(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.PropExists(&_ParameterizerContract.CallOpts, _propID)
}

// PropExists is a free data retrieval call binding the contract method 0x35300990.
//
// Solidity: function propExists(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) PropExists(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.PropExists(&_ParameterizerContract.CallOpts, _propID)
}

// Proposals is a free data retrieval call binding the contract method 0x32ed5b12.
//
// Solidity: function proposals( bytes32) constant returns(appExpiry uint256, challengeID uint256, deposit uint256, name string, owner address, processBy uint256, value uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Proposals(opts *bind.CallOpts, arg0 [32]byte) (struct {
	AppExpiry   *big.Int
	ChallengeID *big.Int
	Deposit     *big.Int
	Name        string
	Owner       common.Address
	ProcessBy   *big.Int
	Value       *big.Int
}, error) {
	ret := new(struct {
		AppExpiry   *big.Int
		ChallengeID *big.Int
		Deposit     *big.Int
		Name        string
		Owner       common.Address
		ProcessBy   *big.Int
		Value       *big.Int
	})
	out := ret
	err := _ParameterizerContract.contract.Call(opts, out, "proposals", arg0)
	return *ret, err
}

// Proposals is a free data retrieval call binding the contract method 0x32ed5b12.
//
// Solidity: function proposals( bytes32) constant returns(appExpiry uint256, challengeID uint256, deposit uint256, name string, owner address, processBy uint256, value uint256)
func (_ParameterizerContract *ParameterizerContractSession) Proposals(arg0 [32]byte) (struct {
	AppExpiry   *big.Int
	ChallengeID *big.Int
	Deposit     *big.Int
	Name        string
	Owner       common.Address
	ProcessBy   *big.Int
	Value       *big.Int
}, error) {
	return _ParameterizerContract.Contract.Proposals(&_ParameterizerContract.CallOpts, arg0)
}

// Proposals is a free data retrieval call binding the contract method 0x32ed5b12.
//
// Solidity: function proposals( bytes32) constant returns(appExpiry uint256, challengeID uint256, deposit uint256, name string, owner address, processBy uint256, value uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Proposals(arg0 [32]byte) (struct {
	AppExpiry   *big.Int
	ChallengeID *big.Int
	Deposit     *big.Int
	Name        string
	Owner       common.Address
	ProcessBy   *big.Int
	Value       *big.Int
}, error) {
	return _ParameterizerContract.Contract.Proposals(&_ParameterizerContract.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ParameterizerContract *ParameterizerContractSession) Token() (common.Address, error) {
	return _ParameterizerContract.Contract.Token(&_ParameterizerContract.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCallerSession) Token() (common.Address, error) {
	return _ParameterizerContract.Contract.Token(&_ParameterizerContract.CallOpts)
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) TokenClaims(opts *bind.CallOpts, _challengeID *big.Int, _voter common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "tokenClaims", _challengeID, _voter)
	return *ret0, err
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) TokenClaims(_challengeID *big.Int, _voter common.Address) (bool, error) {
	return _ParameterizerContract.Contract.TokenClaims(&_ParameterizerContract.CallOpts, _challengeID, _voter)
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) TokenClaims(_challengeID *big.Int, _voter common.Address) (bool, error) {
	return _ParameterizerContract.Contract.TokenClaims(&_ParameterizerContract.CallOpts, _challengeID, _voter)
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(_voter address, _challengeID uint256, _salt uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) VoterReward(opts *bind.CallOpts, _voter common.Address, _challengeID *big.Int, _salt *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "voterReward", _voter, _challengeID, _salt)
	return *ret0, err
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(_voter address, _challengeID uint256, _salt uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) VoterReward(_voter common.Address, _challengeID *big.Int, _salt *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.VoterReward(&_ParameterizerContract.CallOpts, _voter, _challengeID, _salt)
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(_voter address, _challengeID uint256, _salt uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) VoterReward(_voter common.Address, _challengeID *big.Int, _salt *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.VoterReward(&_ParameterizerContract.CallOpts, _voter, _challengeID, _salt)
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCaller) Voting(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "voting")
	return *ret0, err
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_ParameterizerContract *ParameterizerContractSession) Voting() (common.Address, error) {
	return _ParameterizerContract.Contract.Voting(&_ParameterizerContract.CallOpts)
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCallerSession) Voting() (common.Address, error) {
	return _ParameterizerContract.Contract.Voting(&_ParameterizerContract.CallOpts)
}

// ChallengeReparameterization is a paid mutator transaction binding the contract method 0x8240ae4b.
//
// Solidity: function challengeReparameterization(_propID bytes32) returns(challengeID uint256)
func (_ParameterizerContract *ParameterizerContractTransactor) ChallengeReparameterization(opts *bind.TransactOpts, _propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "challengeReparameterization", _propID)
}

// ChallengeReparameterization is a paid mutator transaction binding the contract method 0x8240ae4b.
//
// Solidity: function challengeReparameterization(_propID bytes32) returns(challengeID uint256)
func (_ParameterizerContract *ParameterizerContractSession) ChallengeReparameterization(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ChallengeReparameterization(&_ParameterizerContract.TransactOpts, _propID)
}

// ChallengeReparameterization is a paid mutator transaction binding the contract method 0x8240ae4b.
//
// Solidity: function challengeReparameterization(_propID bytes32) returns(challengeID uint256)
func (_ParameterizerContract *ParameterizerContractTransactorSession) ChallengeReparameterization(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ChallengeReparameterization(&_ParameterizerContract.TransactOpts, _propID)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_ParameterizerContract *ParameterizerContractTransactor) ClaimReward(opts *bind.TransactOpts, _challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "claimReward", _challengeID, _salt)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_ParameterizerContract *ParameterizerContractSession) ClaimReward(_challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ClaimReward(&_ParameterizerContract.TransactOpts, _challengeID, _salt)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_ParameterizerContract *ParameterizerContractTransactorSession) ClaimReward(_challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ClaimReward(&_ParameterizerContract.TransactOpts, _challengeID, _salt)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x5f02116f.
//
// Solidity: function claimRewards(_challengeIDs uint256[], _salts uint256[]) returns()
func (_ParameterizerContract *ParameterizerContractTransactor) ClaimRewards(opts *bind.TransactOpts, _challengeIDs []*big.Int, _salts []*big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "claimRewards", _challengeIDs, _salts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x5f02116f.
//
// Solidity: function claimRewards(_challengeIDs uint256[], _salts uint256[]) returns()
func (_ParameterizerContract *ParameterizerContractSession) ClaimRewards(_challengeIDs []*big.Int, _salts []*big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ClaimRewards(&_ParameterizerContract.TransactOpts, _challengeIDs, _salts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x5f02116f.
//
// Solidity: function claimRewards(_challengeIDs uint256[], _salts uint256[]) returns()
func (_ParameterizerContract *ParameterizerContractTransactorSession) ClaimRewards(_challengeIDs []*big.Int, _salts []*big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ClaimRewards(&_ParameterizerContract.TransactOpts, _challengeIDs, _salts)
}

// ProcessProposal is a paid mutator transaction binding the contract method 0x30490e91.
//
// Solidity: function processProposal(_propID bytes32) returns()
func (_ParameterizerContract *ParameterizerContractTransactor) ProcessProposal(opts *bind.TransactOpts, _propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "processProposal", _propID)
}

// ProcessProposal is a paid mutator transaction binding the contract method 0x30490e91.
//
// Solidity: function processProposal(_propID bytes32) returns()
func (_ParameterizerContract *ParameterizerContractSession) ProcessProposal(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProcessProposal(&_ParameterizerContract.TransactOpts, _propID)
}

// ProcessProposal is a paid mutator transaction binding the contract method 0x30490e91.
//
// Solidity: function processProposal(_propID bytes32) returns()
func (_ParameterizerContract *ParameterizerContractTransactorSession) ProcessProposal(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProcessProposal(&_ParameterizerContract.TransactOpts, _propID)
}

// ProposeReparameterization is a paid mutator transaction binding the contract method 0xbade1c54.
//
// Solidity: function proposeReparameterization(_name string, _value uint256) returns(bytes32)
func (_ParameterizerContract *ParameterizerContractTransactor) ProposeReparameterization(opts *bind.TransactOpts, _name string, _value *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "proposeReparameterization", _name, _value)
}

// ProposeReparameterization is a paid mutator transaction binding the contract method 0xbade1c54.
//
// Solidity: function proposeReparameterization(_name string, _value uint256) returns(bytes32)
func (_ParameterizerContract *ParameterizerContractSession) ProposeReparameterization(_name string, _value *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProposeReparameterization(&_ParameterizerContract.TransactOpts, _name, _value)
}

// ProposeReparameterization is a paid mutator transaction binding the contract method 0xbade1c54.
//
// Solidity: function proposeReparameterization(_name string, _value uint256) returns(bytes32)
func (_ParameterizerContract *ParameterizerContractTransactorSession) ProposeReparameterization(_name string, _value *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProposeReparameterization(&_ParameterizerContract.TransactOpts, _name, _value)
}

// ParameterizerContractChallengeFailedIterator is returned from FilterChallengeFailed and is used to iterate over the raw logs and unpacked data for ChallengeFailed events raised by the ParameterizerContract contract.
type ParameterizerContractChallengeFailedIterator struct {
	Event *ParameterizerContractChallengeFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractChallengeFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractChallengeFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractChallengeFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractChallengeFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractChallengeFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractChallengeFailed represents a ChallengeFailed event raised by the ParameterizerContract contract.
type ParameterizerContractChallengeFailed struct {
	PropID      [32]byte
	ChallengeID *big.Int
	RewardPool  *big.Int
	TotalTokens *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeFailed is a free log retrieval operation binding the contract event 0xc4497224aa78dd50c9b3e344aab02596201ca1e6dca4057a91a6c02f83f4f6c1.
//
// Solidity: e _ChallengeFailed(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterChallengeFailed(opts *bind.FilterOpts, propID [][32]byte, challengeID []*big.Int) (*ParameterizerContractChallengeFailedIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ChallengeFailed", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractChallengeFailedIterator{contract: _ParameterizerContract.contract, event: "_ChallengeFailed", logs: logs, sub: sub}, nil
}

// WatchChallengeFailed is a free log subscription operation binding the contract event 0xc4497224aa78dd50c9b3e344aab02596201ca1e6dca4057a91a6c02f83f4f6c1.
//
// Solidity: e _ChallengeFailed(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchChallengeFailed(opts *bind.WatchOpts, sink chan<- *ParameterizerContractChallengeFailed, propID [][32]byte, challengeID []*big.Int) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ChallengeFailed", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractChallengeFailed)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ChallengeFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractChallengeSucceededIterator is returned from FilterChallengeSucceeded and is used to iterate over the raw logs and unpacked data for ChallengeSucceeded events raised by the ParameterizerContract contract.
type ParameterizerContractChallengeSucceededIterator struct {
	Event *ParameterizerContractChallengeSucceeded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractChallengeSucceededIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractChallengeSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractChallengeSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractChallengeSucceededIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractChallengeSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractChallengeSucceeded represents a ChallengeSucceeded event raised by the ParameterizerContract contract.
type ParameterizerContractChallengeSucceeded struct {
	PropID      [32]byte
	ChallengeID *big.Int
	RewardPool  *big.Int
	TotalTokens *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeSucceeded is a free log retrieval operation binding the contract event 0x362a12431f779a2baff4f77f75ba7960ae993a5c41b425df11f7fd0af2b9cbe6.
//
// Solidity: e _ChallengeSucceeded(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterChallengeSucceeded(opts *bind.FilterOpts, propID [][32]byte, challengeID []*big.Int) (*ParameterizerContractChallengeSucceededIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ChallengeSucceeded", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractChallengeSucceededIterator{contract: _ParameterizerContract.contract, event: "_ChallengeSucceeded", logs: logs, sub: sub}, nil
}

// WatchChallengeSucceeded is a free log subscription operation binding the contract event 0x362a12431f779a2baff4f77f75ba7960ae993a5c41b425df11f7fd0af2b9cbe6.
//
// Solidity: e _ChallengeSucceeded(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchChallengeSucceeded(opts *bind.WatchOpts, sink chan<- *ParameterizerContractChallengeSucceeded, propID [][32]byte, challengeID []*big.Int) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ChallengeSucceeded", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractChallengeSucceeded)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ChallengeSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractNewChallengeIterator is returned from FilterNewChallenge and is used to iterate over the raw logs and unpacked data for NewChallenge events raised by the ParameterizerContract contract.
type ParameterizerContractNewChallengeIterator struct {
	Event *ParameterizerContractNewChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractNewChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractNewChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractNewChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractNewChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractNewChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractNewChallenge represents a NewChallenge event raised by the ParameterizerContract contract.
type ParameterizerContractNewChallenge struct {
	PropID        [32]byte
	ChallengeID   *big.Int
	CommitEndDate *big.Int
	RevealEndDate *big.Int
	Challenger    common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewChallenge is a free log retrieval operation binding the contract event 0xe94e3086c4bfe84acba4437b85a80fca3721dfc419d1f7afe4fa4e470e670b48.
//
// Solidity: e _NewChallenge(propID indexed bytes32, challengeID uint256, commitEndDate uint256, revealEndDate uint256, challenger indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterNewChallenge(opts *bind.FilterOpts, propID [][32]byte, challenger []common.Address) (*ParameterizerContractNewChallengeIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_NewChallenge", propIDRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractNewChallengeIterator{contract: _ParameterizerContract.contract, event: "_NewChallenge", logs: logs, sub: sub}, nil
}

// WatchNewChallenge is a free log subscription operation binding the contract event 0xe94e3086c4bfe84acba4437b85a80fca3721dfc419d1f7afe4fa4e470e670b48.
//
// Solidity: e _NewChallenge(propID indexed bytes32, challengeID uint256, commitEndDate uint256, revealEndDate uint256, challenger indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchNewChallenge(opts *bind.WatchOpts, sink chan<- *ParameterizerContractNewChallenge, propID [][32]byte, challenger []common.Address) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_NewChallenge", propIDRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractNewChallenge)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_NewChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractProposalAcceptedIterator is returned from FilterProposalAccepted and is used to iterate over the raw logs and unpacked data for ProposalAccepted events raised by the ParameterizerContract contract.
type ParameterizerContractProposalAcceptedIterator struct {
	Event *ParameterizerContractProposalAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractProposalAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractProposalAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractProposalAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractProposalAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractProposalAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractProposalAccepted represents a ProposalAccepted event raised by the ParameterizerContract contract.
type ParameterizerContractProposalAccepted struct {
	PropID [32]byte
	Name   string
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterProposalAccepted is a free log retrieval operation binding the contract event 0x37f3986c71e1aa2c470cfc4a92af70820610c3065589d35ef1664ea27f3e73a5.
//
// Solidity: e _ProposalAccepted(propID indexed bytes32, name string, value uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterProposalAccepted(opts *bind.FilterOpts, propID [][32]byte) (*ParameterizerContractProposalAcceptedIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ProposalAccepted", propIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractProposalAcceptedIterator{contract: _ParameterizerContract.contract, event: "_ProposalAccepted", logs: logs, sub: sub}, nil
}

// WatchProposalAccepted is a free log subscription operation binding the contract event 0x37f3986c71e1aa2c470cfc4a92af70820610c3065589d35ef1664ea27f3e73a5.
//
// Solidity: e _ProposalAccepted(propID indexed bytes32, name string, value uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchProposalAccepted(opts *bind.WatchOpts, sink chan<- *ParameterizerContractProposalAccepted, propID [][32]byte) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ProposalAccepted", propIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractProposalAccepted)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ProposalAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractProposalExpiredIterator is returned from FilterProposalExpired and is used to iterate over the raw logs and unpacked data for ProposalExpired events raised by the ParameterizerContract contract.
type ParameterizerContractProposalExpiredIterator struct {
	Event *ParameterizerContractProposalExpired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractProposalExpiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractProposalExpired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractProposalExpired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractProposalExpiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractProposalExpiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractProposalExpired represents a ProposalExpired event raised by the ParameterizerContract contract.
type ParameterizerContractProposalExpired struct {
	PropID [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterProposalExpired is a free log retrieval operation binding the contract event 0x29026cb2acebe6d0a4b6d593ccadf76e3fc6d0a02254e078b0c4a619608089d7.
//
// Solidity: e _ProposalExpired(propID indexed bytes32)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterProposalExpired(opts *bind.FilterOpts, propID [][32]byte) (*ParameterizerContractProposalExpiredIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ProposalExpired", propIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractProposalExpiredIterator{contract: _ParameterizerContract.contract, event: "_ProposalExpired", logs: logs, sub: sub}, nil
}

// WatchProposalExpired is a free log subscription operation binding the contract event 0x29026cb2acebe6d0a4b6d593ccadf76e3fc6d0a02254e078b0c4a619608089d7.
//
// Solidity: e _ProposalExpired(propID indexed bytes32)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchProposalExpired(opts *bind.WatchOpts, sink chan<- *ParameterizerContractProposalExpired, propID [][32]byte) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ProposalExpired", propIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractProposalExpired)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ProposalExpired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractReparameterizationProposalIterator is returned from FilterReparameterizationProposal and is used to iterate over the raw logs and unpacked data for ReparameterizationProposal events raised by the ParameterizerContract contract.
type ParameterizerContractReparameterizationProposalIterator struct {
	Event *ParameterizerContractReparameterizationProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractReparameterizationProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractReparameterizationProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractReparameterizationProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractReparameterizationProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractReparameterizationProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractReparameterizationProposal represents a ReparameterizationProposal event raised by the ParameterizerContract contract.
type ParameterizerContractReparameterizationProposal struct {
	Name       string
	Value      *big.Int
	PropID     [32]byte
	Deposit    *big.Int
	AppEndDate *big.Int
	Proposer   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterReparameterizationProposal is a free log retrieval operation binding the contract event 0xb25bdef16105f099e5c185f9c7fd969571e8e0caa3f7bd75409512fe0a41a60b.
//
// Solidity: e _ReparameterizationProposal(name string, value uint256, propID bytes32, deposit uint256, appEndDate uint256, proposer indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterReparameterizationProposal(opts *bind.FilterOpts, proposer []common.Address) (*ParameterizerContractReparameterizationProposalIterator, error) {

	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ReparameterizationProposal", proposerRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractReparameterizationProposalIterator{contract: _ParameterizerContract.contract, event: "_ReparameterizationProposal", logs: logs, sub: sub}, nil
}

// WatchReparameterizationProposal is a free log subscription operation binding the contract event 0xb25bdef16105f099e5c185f9c7fd969571e8e0caa3f7bd75409512fe0a41a60b.
//
// Solidity: e _ReparameterizationProposal(name string, value uint256, propID bytes32, deposit uint256, appEndDate uint256, proposer indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchReparameterizationProposal(opts *bind.WatchOpts, sink chan<- *ParameterizerContractReparameterizationProposal, proposer []common.Address) (event.Subscription, error) {

	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ReparameterizationProposal", proposerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractReparameterizationProposal)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ReparameterizationProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the ParameterizerContract contract.
type ParameterizerContractRewardClaimedIterator struct {
	Event *ParameterizerContractRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractRewardClaimed represents a RewardClaimed event raised by the ParameterizerContract contract.
type ParameterizerContractRewardClaimed struct {
	ChallengeID *big.Int
	Reward      *big.Int
	Voter       common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0x6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957.
//
// Solidity: e _RewardClaimed(challengeID indexed uint256, reward uint256, voter indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterRewardClaimed(opts *bind.FilterOpts, challengeID []*big.Int, voter []common.Address) (*ParameterizerContractRewardClaimedIterator, error) {

	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_RewardClaimed", challengeIDRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractRewardClaimedIterator{contract: _ParameterizerContract.contract, event: "_RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0x6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957.
//
// Solidity: e _RewardClaimed(challengeID indexed uint256, reward uint256, voter indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *ParameterizerContractRewardClaimed, challengeID []*big.Int, voter []common.Address) (event.Subscription, error) {

	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_RewardClaimed", challengeIDRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractRewardClaimed)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
